# find questions at https://projecteuler.net/archives

def problem1(num):
	answer = 0
	for i in range(0, num):
		if i % 3 == 0 or i % 5 == 0:
			answer+= i
	print(answer)
def problem1efficient(num):
	print(sum([i for i in range(num) if i % 3 == 0 or i % 5 ==0]))
# problem1(1000) = 233168

def problem2(num):
	answerlist = [1, 2]
	answer = 0
	while answerlist[-1] < num:
		answerlist.append(answerlist[-1] + answerlist[-2])
	for i in answerlist:
		if i % 2 == 0:
			answer += i
	print(answer)
# problem2(4000000) = 4613732

def problem3(num):
	import math
	prime = True
	answerlist = []
	for i in range(2, math.floor(num ** .5)):
		for x in range(2,i):
			if i % x == 0:
				prime = False
		if prime == True:
			if num % i == 0:
				answerlist.append(i)
		else:
			prime = True
	print(max(answerlist))
# problem3(600851475143) = 6857

def problem4():
	answerlist = []
	for i in range(100, 1000):
		for j in range(100, 1000):
			if [int(x) for x in str(i * j)] == [int(x) for x in str(i * j)][::-1]:
				answerlist.append(i * j)
	print(max(answerlist))
# problem4() = 906609

def problem5(num):
	answerslist = []
	for i in range(2, num + 1):
		prime = True
		for j in range(2, i):
			if i % j == 0:
				prime = False
		if prime == True:
			answerslist.append(i)
	for n, a in enumerate(answerslist):
		b = a
		while a <= num:
			if a * b <= num:
				a *= b
			else:
				break
		answerslist[n] = a
	answer = 1
	for i in answerslist:
		answer *= i
	print(answer)
# problem5(20) = 232792560

def problem6(num):
	squaresum = 0
	totalsum = 0
	for i in range(1, num + 1):
		squaresum += i ** 2
		totalsum += i
	print(totalsum ** 2 - squaresum)
# problem6(100) = 25164150

def problem7(num):
	check = 0
	answerslist = []
	i = 2
	while check != num:
		prime = True
		for j in range(2, i):
			if i % j == 0:
				prime = False
		if prime == True:
			answerslist.append(i)
			check += 1
		i += 1
	print(answerslist[num - 1])
# problem7(10001) = 104743

def problem8(num, length):
	number = [int(x) for x in str(num)]
	answerlist = []
	for n, x in enumerate(number):
		y = 1
		for i in range(0, length):
			if n + i <= len(number) - 1:
				y *= number[n + i]
		answerlist.append(y)
	print(max(answerlist))
# problem8(7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450, 13) = 23514624000

def problem9(first, number):
        import math
        order = []
        another = []
        for i in range(1, number + 1):
                for j in range(1, number + 1):
                        x = i*i + j*j
                        y = int(math.sqrt(x))
                        if y*y == x and y <= number and y >= first:
                                if i <= j:
                                        order.append(i + j + y)
                                        another.append(i * j * y)
        for i in order:
        	if i == 1000:
        		print(another[order.index(i)])
        print(order)
# problem9(1, 500) = 31875000

def problem10(number):
	def check_prime(num):
		prime = True
		for i in range(2, round(num ** .5) + 1):
			if num % i == 0:
				prime = False
		return prime
	answerslist = [2, 3]
	six = 1
	while answerslist[-2] < number:
		if 6 * six + 1 < number:
			if check_prime((6 * six) - 1) == True:
				answerslist.append((6 * six) - 1)
			if check_prime((6 * six) + 1) == True:
				answerslist.append((6 * six) + 1)
			six += 1
		else:
			break
	print(sum(answerslist))
# problem10(2000000) = 142913828922

def problem11():
	ans = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
	def product(inputlist):
		ans = 1
		for i in inputlist:
			ans *= i
		return ans
	def maxmaxrow():
		anslist = []
		def maxrow(num):
			row = []
			for i in ans[num]:
				j = ans[num].index(i)
				if j + 4 <= len(ans[num]):
					row.append(product(ans[num][j: j + 4]))
			return(max(row))
		for i in range(0, 20):
			anslist.append(maxrow(i))
		return max(anslist)
	def maxmaxcol():
		anslist = []
		def maxcol(num):
			col = []
			for i in ans:
				j = ans.index(i)
				if j + 4 <= len(ans):
					col.append(ans[j][num] * ans[j + 1][num] * ans[j + 2][num] * ans[j + 3][num])
			return(max(col))
		for i in range(0, 20):
			anslist.append(maxcol(i))
		return max(anslist)
	def maxmaxdleft():
		anslist = []
		def maxdleft(num):
			dleft = []
			for i in ans[num]:
				j = ans[num].index(i)
				if j - 3 >= 0 and num <= 17:
					dleft.append(ans[num][j] * ans[num + 1][j - 1] * ans[num + 2][j - 2] * ans[num + 3][j - 3])
			return(max(dleft))
		for i in range(0, 17):
			anslist.append(maxdleft(i))
		return max(anslist)
	def maxmaxdright():
		anslist = []
		def maxdright(num):
			dright = []
			for i in ans[num]:
				j = ans[num].index(i)
				if j + 4 <= len(ans[num]) and num <= 17:
					dright.append(ans[num][j] * ans[num + 1][j + 1] * ans[num + 2][j + 2] * ans[num + 3][j + 3])
			return(max(dright))
		for i in range(0, 17):
			anslist.append(maxdright(i))
		return max(anslist)
	print(max(maxmaxrow(), maxmaxcol(), maxmaxdleft(), maxmaxdright()))
# problem11() = 70600674

def problem12(number):
	def prime_factorization(num):
		def factorization(num):
			primelist = []
			for i in range(2, num + 1):
				if num % i == 0:
					primelist.append(i)
					primelist.append(int(num / i))
					break
			primelist.sort()
			if primelist[0] == 1:
				primelist.remove(1)
			return primelist
		def check_prime(num):
			prime = True
			for i in range(2, num):
				if num % i == 0:
					prime = False
			return prime
		answerlist = factorization(num)
		for i in answerlist:
			if check_prime(i) == False:
				answerlist.extend(factorization(i))
				answerlist.remove(i)
		return answerlist
	def merge(list1, list2):
		list3 = []
		for i in list2:
			for j in list1:
				if i == j:
					list1.remove(j)
					list2.remove(j)
					list3.append(j)
					break
		return list1 + list2 + list3
	check = 2
	while True:
		anslist = merge(prime_factorization(check),prime_factorization(check + 1))
		anslist.remove(2)
		ans = []
		answer = 1
		for j in set(anslist):
			ans.append(anslist.count(j))
		for k in ans:
			answer *= k + 1
		if answer > number:
			print(int((check * (check + 1)) / 2))
			break
		else:
			check += 1
# problem12(500) = 76576500

def problem13(numofdigits):
	inputlist = [37107287533902102798797998220837590246510135740250, 46376937677490009712648124896970078050417018260538, 74324986199524741059474233309513058123726617309629, 91942213363574161572522430563301811072406154908250, 23067588207539346171171980310421047513778063246676, 89261670696623633820136378418383684178734361726757, 28112879812849979408065481931592621691275889832738, 44274228917432520321923589422876796487670272189318, 47451445736001306439091167216856844588711603153276, 70386486105843025439939619828917593665686757934951, 62176457141856560629502157223196586755079324193331, 64906352462741904929101432445813822663347944758178, 92575867718337217661963751590579239728245598838407, 58203565325359399008402633568948830189458628227828, 80181199384826282014278194139940567587151170094390, 35398664372827112653829987240784473053190104293586, 86515506006295864861532075273371959191420517255829, 71693888707715466499115593487603532921714970056938, 54370070576826684624621495650076471787294438377604, 53282654108756828443191190634694037855217779295145, 36123272525000296071075082563815656710885258350721, 45876576172410976447339110607218265236877223636045, 17423706905851860660448207621209813287860733969412, 81142660418086830619328460811191061556940512689692, 51934325451728388641918047049293215058642563049483, 62467221648435076201727918039944693004732956340691, 15732444386908125794514089057706229429197107928209, 55037687525678773091862540744969844508330393682126, 18336384825330154686196124348767681297534375946515, 80386287592878490201521685554828717201219257766954, 78182833757993103614740356856449095527097864797581, 16726320100436897842553539920931837441497806860984, 48403098129077791799088218795327364475675590848030, 87086987551392711854517078544161852424320693150332, 59959406895756536782107074926966537676326235447210, 69793950679652694742597709739166693763042633987085, 41052684708299085211399427365734116182760315001271, 65378607361501080857009149939512557028198746004375, 35829035317434717326932123578154982629742552737307, 94953759765105305946966067683156574377167401875275, 88902802571733229619176668713819931811048770190271, 25267680276078003013678680992525463401061632866526, 36270218540497705585629946580636237993140746255962, 24074486908231174977792365466257246923322810917141, 91430288197103288597806669760892938638285025333403, 34413065578016127815921815005561868836468420090470, 23053081172816430487623791969842487255036638784583, 11487696932154902810424020138335124462181441773470, 63783299490636259666498587618221225225512486764533, 67720186971698544312419572409913959008952310058822, 95548255300263520781532296796249481641953868218774, 76085327132285723110424803456124867697064507995236, 37774242535411291684276865538926205024910326572967, 23701913275725675285653248258265463092207058596522, 29798860272258331913126375147341994889534765745501, 18495701454879288984856827726077713721403798879715, 38298203783031473527721580348144513491373226651381, 34829543829199918180278916522431027392251122869539, 40957953066405232632538044100059654939159879593635, 29746152185502371307642255121183693803580388584903, 41698116222072977186158236678424689157993532961922, 62467957194401269043877107275048102390895523597457, 23189706772547915061505504953922979530901129967519, 86188088225875314529584099251203829009407770775672, 11306739708304724483816533873502340845647058077308, 82959174767140363198008187129011875491310547126581, 97623331044818386269515456334926366572897563400500, 42846280183517070527831839425882145521227251250327, 55121603546981200581762165212827652751691296897789, 32238195734329339946437501907836945765883352399886, 75506164965184775180738168837861091527357929701337, 62177842752192623401942399639168044983993173312731, 32924185707147349566916674687634660915035914677504, 99518671430235219628894890102423325116913619626622, 73267460800591547471830798392868535206946944540724, 76841822524674417161514036427982273348055556214818, 97142617910342598647204516893989422179826088076852, 87783646182799346313767754307809363333018982642090, 10848802521674670883215120185883543223812876952786, 71329612474782464538636993009049310363619763878039, 62184073572399794223406235393808339651327408011116, 66627891981488087797941876876144230030984490851411, 60661826293682836764744779239180335110989069790714, 85786944089552990653640447425576083659976645795096, 66024396409905389607120198219976047599490197230297, 64913982680032973156037120041377903785566085089252, 16730939319872750275468906903707539413042652315011, 94809377245048795150954100921645863754710598436791, 78639167021187492431995700641917969777599028300699, 15368713711936614952811305876380278410754449733078, 40789923115535562561142322423255033685442488917353, 44889911501440648020369068063960672322193204149535, 41503128880339536053299340368006977710650566631954, 81234880673210146739058568557934581403627822703280, 82616570773948327592232845941706525094512325230608, 22918802058777319719839450180888072429661980811197, 77158542502016545090413245809786882778948721859617, 72107838435069186155435662884062257473692284509516, 20849603980134001723930671666823555245252804609722, 53503534226472524250874054075591789781264330331690]
	outputlist = []
	for i in inputlist:
		outputlist.append(str(i))
	ans = '0'
	for i in outputlist:
		ans = str(int(ans) + int(i))
	print(ans[0:numofdigits])
# problem13(10) = 5537376230

def problem14(maxrange):
	def collatz(num):
		count = 1
		while num != 1:
			if num % 2 == 0:
				num /= 2
				count += 1
			else:
				num = 3 * num + 1
				count += 1
		else:
			return count
	x = 0
	ans = 0
	for i in range(1, maxrange + 1):
		if collatz(i) > x:
			x = collatz(i)
			ans = i
	print(ans)
# problem14(1000000)

def problem15(num):
	import math
	def nCr(n,r):
		return math.factorial(n) / (math.factorial(r) * math.factorial(n-r))
	print(int(nCr(2 * num, num)))
# problem15(20) = 137846528820

def problem16(num):
	ans = 0
	for i in str(2 ** num):
		ans += int(i)
	print(ans)
# problem16(1000) = 1366

def problem17(num):
	def numletters(num):
		length = len(str(num))
		strdict = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7:'seven', 8: 'eight', 9: 'nine'}
		teendict = {10: 'one', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17:'seventeen', 18: 'eighteen', 19: 'nineteen'}
		tenplacedict = {0: '', 2: 'twenty', 3: 'thirty', 4: 'forty', 5: 'fifty', 6: 'sixty', 7:'seventy', 8: 'eighty', 9: 'ninety'}
		if length == 1:
			return len(strdict[num])
		elif length == 2:
			if str(num)[0] == '1':
				return len(teendict[num])
			else:
				if str(num)[1] == '0':
					return len(tenplacedict[int(str(num)[0])])
				else:
					return len(tenplacedict[int(str(num)[0])]) + len(strdict[int(str(num)[1])])
		elif length == 3:
			if str(num)[1:3] == '00':
				return len(strdict[int(str(num)[0])]) + len('hundred')
			else:
				if str(num)[1] == '1':
					return len(strdict[int(str(num)[0])]) + len('hundredand') + len(teendict[int(str(num)[1:3])])
				else:
					if str(num)[2] == '0':
						return len(strdict[int(str(num)[0])]) + len('hundredand') + len(tenplacedict[int(str(num)[1])])
					else:
						return len(strdict[int(str(num)[0])]) + len('hundredand') + len(tenplacedict[int(str(num)[1])]) + len(strdict[int(str(num)[2])])
		elif length == 4:
			return len('onethousand')
	ans = 0
	for i in range(1, num + 1):
		ans += numletters(i)
	print(ans)
# problem17(1000) = 21124

def problem18():
	x = [[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]
	for h in range(-2, (len(x) * -1) - 1, -1):
		for i in x[h]:
			ind = x[h].index(i)
			a = x[h + 1][ind]
			b = x[h + 1][ind + 1]
			if a > b:
				x[h][ind] = i + a
			else:
				x[h][ind] = i + b
	print(x[0][0])
def problem18extractfile():
	triangletxt = open('EulerNet/problem18.txt').read().strip()
	inp = []
	for row in triangletxt.split('\n'):
		inp.extend([row.strip().split(' ')])
	for i in triangle:
		inp.extend(i[1:])
	for h in range(-2, (len(inp) * -1) - 1, -1):
		ind = 0
		for i in inp[h]:
			a = int(inp[h + 1][ind])
			b = int(inp[h + 1][ind + 1])
			if a > b:
				inp[h][ind] = int(i) + a
			else:
				inp[h][ind] = int(i) + b
			ind += 1
	print(inp[0][0])
# problem18() = problem18extractfile() = 1074

def problem19(years):
	days = 2
	sundays = 0
	leapyears = 0
	for i in range(1, years + 1):
		for j in range(1, 12 + 1):
			if j == 1 or j == 3 or j == 5 or j == 7 or j == 8 or j == 10 or j == 12:
				days += 31
				
			elif j == 4 or j == 6 or j == 9 or j == 11:
				days += 30
			else:
				if i % 4 != 0:
					days += 28
				else:
					days += 29
					leapyears += 1
			if days % 7 == 0:
					sundays += 1
	print(sundays)
# problem19(100) = 171

def problem20(num):
	import math
	ans = 0
	for i in str(math.factorial(num)):
		ans += int(i)
	print(ans)
# problem20(100) = 648

def problem21(upperlimit):
	def divisors(num):
		divlist = []
		for i in range(1, num):
			if num % i == 0:
				divlist.append(i)
		return divlist
	answer = 0
	for i in range(1, upperlimit + 1):
		amicable = sum(divisors(i))
		if sum(divisors(amicable)) == i and amicable != i:
			answer += i
			anslist.append(i)
	print(answer)
# problem21(10000) = 31626

def problem22():
	inputlist = ["MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY","KAREN","BETTY","HELEN","SANDRA","DONNA","CAROL","RUTH","SHARON","MICHELLE","LAURA","SARAH","KIMBERLY","DEBORAH","JESSICA","SHIRLEY","CYNTHIA","ANGELA","MELISSA","BRENDA","AMY","ANNA","REBECCA","VIRGINIA","KATHLEEN","PAMELA","MARTHA","DEBRA","AMANDA","STEPHANIE","CAROLYN","CHRISTINE","MARIE","JANET","CATHERINE","FRANCES","ANN","JOYCE","DIANE","ALICE","JULIE","HEATHER","TERESA","DORIS","GLORIA","EVELYN","JEAN","CHERYL","MILDRED","KATHERINE","JOAN","ASHLEY","JUDITH","ROSE","JANICE","KELLY","NICOLE","JUDY","CHRISTINA","KATHY","THERESA","BEVERLY","DENISE","TAMMY","IRENE","JANE","LORI","RACHEL","MARILYN","ANDREA","KATHRYN","LOUISE","SARA","ANNE","JACQUELINE","WANDA","BONNIE","JULIA","RUBY","LOIS","TINA","PHYLLIS","NORMA","PAULA","DIANA","ANNIE","LILLIAN","EMILY","ROBIN","PEGGY","CRYSTAL","GLADYS","RITA","DAWN","CONNIE","FLORENCE","TRACY","EDNA","TIFFANY","CARMEN","ROSA","CINDY","GRACE","WENDY","VICTORIA","EDITH","KIM","SHERRY","SYLVIA","JOSEPHINE","THELMA","SHANNON","SHEILA","ETHEL","ELLEN","ELAINE","MARJORIE","CARRIE","CHARLOTTE","MONICA","ESTHER","PAULINE","EMMA","JUANITA","ANITA","RHONDA","HAZEL","AMBER","EVA","DEBBIE","APRIL","LESLIE","CLARA","LUCILLE","JAMIE","JOANNE","ELEANOR","VALERIE","DANIELLE","MEGAN","ALICIA","SUZANNE","MICHELE","GAIL","BERTHA","DARLENE","VERONICA","JILL","ERIN","GERALDINE","LAUREN","CATHY","JOANN","LORRAINE","LYNN","SALLY","REGINA","ERICA","BEATRICE","DOLORES","BERNICE","AUDREY","YVONNE","ANNETTE","JUNE","SAMANTHA","MARION","DANA","STACY","ANA","RENEE","IDA","VIVIAN","ROBERTA","HOLLY","BRITTANY","MELANIE","LORETTA","YOLANDA","JEANETTE","LAURIE","KATIE","KRISTEN","VANESSA","ALMA","SUE","ELSIE","BETH","JEANNE","VICKI","CARLA","TARA","ROSEMARY","EILEEN","TERRI","GERTRUDE","LUCY","TONYA","ELLA","STACEY","WILMA","GINA","KRISTIN","JESSIE","NATALIE","AGNES","VERA","WILLIE","CHARLENE","BESSIE","DELORES","MELINDA","PEARL","ARLENE","MAUREEN","COLLEEN","ALLISON","TAMARA","JOY","GEORGIA","CONSTANCE","LILLIE","CLAUDIA","JACKIE","MARCIA","TANYA","NELLIE","MINNIE","MARLENE","HEIDI","GLENDA","LYDIA","VIOLA","COURTNEY","MARIAN","STELLA","CAROLINE","DORA","JO","VICKIE","MATTIE","TERRY","MAXINE","IRMA","MABEL","MARSHA","MYRTLE","LENA","CHRISTY","DEANNA","PATSY","HILDA","GWENDOLYN","JENNIE","NORA","MARGIE","NINA","CASSANDRA","LEAH","PENNY","KAY","PRISCILLA","NAOMI","CAROLE","BRANDY","OLGA","BILLIE","DIANNE","TRACEY","LEONA","JENNY","FELICIA","SONIA","MIRIAM","VELMA","BECKY","BOBBIE","VIOLET","KRISTINA","TONI","MISTY","MAE","SHELLY","DAISY","RAMONA","SHERRI","ERIKA","KATRINA","CLAIRE","LINDSEY","LINDSAY","GENEVA","GUADALUPE","BELINDA","MARGARITA","SHERYL","CORA","FAYE","ADA","NATASHA","SABRINA","ISABEL","MARGUERITE","HATTIE","HARRIET","MOLLY","CECILIA","KRISTI","BRANDI","BLANCHE","SANDY","ROSIE","JOANNA","IRIS","EUNICE","ANGIE","INEZ","LYNDA","MADELINE","AMELIA","ALBERTA","GENEVIEVE","MONIQUE","JODI","JANIE","MAGGIE","KAYLA","SONYA","JAN","LEE","KRISTINE","CANDACE","FANNIE","MARYANN","OPAL","ALISON","YVETTE","MELODY","LUZ","SUSIE","OLIVIA","FLORA","SHELLEY","KRISTY","MAMIE","LULA","LOLA","VERNA","BEULAH","ANTOINETTE","CANDICE","JUANA","JEANNETTE","PAM","KELLI","HANNAH","WHITNEY","BRIDGET","KARLA","CELIA","LATOYA","PATTY","SHELIA","GAYLE","DELLA","VICKY","LYNNE","SHERI","MARIANNE","KARA","JACQUELYN","ERMA","BLANCA","MYRA","LETICIA","PAT","KRISTA","ROXANNE","ANGELICA","JOHNNIE","ROBYN","FRANCIS","ADRIENNE","ROSALIE","ALEXANDRA","BROOKE","BETHANY","SADIE","BERNADETTE","TRACI","JODY","KENDRA","JASMINE","NICHOLE","RACHAEL","CHELSEA","MABLE","ERNESTINE","MURIEL","MARCELLA","ELENA","KRYSTAL","ANGELINA","NADINE","KARI","ESTELLE","DIANNA","PAULETTE","LORA","MONA","DOREEN","ROSEMARIE","ANGEL","DESIREE","ANTONIA","HOPE","GINGER","JANIS","BETSY","CHRISTIE","FREDA","MERCEDES","MEREDITH","LYNETTE","TERI","CRISTINA","EULA","LEIGH","MEGHAN","SOPHIA","ELOISE","ROCHELLE","GRETCHEN","CECELIA","RAQUEL","HENRIETTA","ALYSSA","JANA","KELLEY","GWEN","KERRY","JENNA","TRICIA","LAVERNE","OLIVE","ALEXIS","TASHA","SILVIA","ELVIRA","CASEY","DELIA","SOPHIE","KATE","PATTI","LORENA","KELLIE","SONJA","LILA","LANA","DARLA","MAY","MINDY","ESSIE","MANDY","LORENE","ELSA","JOSEFINA","JEANNIE","MIRANDA","DIXIE","LUCIA","MARTA","FAITH","LELA","JOHANNA","SHARI","CAMILLE","TAMI","SHAWNA","ELISA","EBONY","MELBA","ORA","NETTIE","TABITHA","OLLIE","JAIME","WINIFRED","KRISTIE","MARINA","ALISHA","AIMEE","RENA","MYRNA","MARLA","TAMMIE","LATASHA","BONITA","PATRICE","RONDA","SHERRIE","ADDIE","FRANCINE","DELORIS","STACIE","ADRIANA","CHERI","SHELBY","ABIGAIL","CELESTE","JEWEL","CARA","ADELE","REBEKAH","LUCINDA","DORTHY","CHRIS","EFFIE","TRINA","REBA","SHAWN","SALLIE","AURORA","LENORA","ETTA","LOTTIE","KERRI","TRISHA","NIKKI","ESTELLA","FRANCISCA","JOSIE","TRACIE","MARISSA","KARIN","BRITTNEY","JANELLE","LOURDES","LAUREL","HELENE","FERN","ELVA","CORINNE","KELSEY","INA","BETTIE","ELISABETH","AIDA","CAITLIN","INGRID","IVA","EUGENIA","CHRISTA","GOLDIE","CASSIE","MAUDE","JENIFER","THERESE","FRANKIE","DENA","LORNA","JANETTE","LATONYA","CANDY","MORGAN","CONSUELO","TAMIKA","ROSETTA","DEBORA","CHERIE","POLLY","DINA","JEWELL","FAY","JILLIAN","DOROTHEA","NELL","TRUDY","ESPERANZA","PATRICA","KIMBERLEY","SHANNA","HELENA","CAROLINA","CLEO","STEFANIE","ROSARIO","OLA","JANINE","MOLLIE","LUPE","ALISA","LOU","MARIBEL","SUSANNE","BETTE","SUSANA","ELISE","CECILE","ISABELLE","LESLEY","JOCELYN","PAIGE","JONI","RACHELLE","LEOLA","DAPHNE","ALTA","ESTER","PETRA","GRACIELA","IMOGENE","JOLENE","KEISHA","LACEY","GLENNA","GABRIELA","KERI","URSULA","LIZZIE","KIRSTEN","SHANA","ADELINE","MAYRA","JAYNE","JACLYN","GRACIE","SONDRA","CARMELA","MARISA","ROSALIND","CHARITY","TONIA","BEATRIZ","MARISOL","CLARICE","JEANINE","SHEENA","ANGELINE","FRIEDA","LILY","ROBBIE","SHAUNA","MILLIE","CLAUDETTE","CATHLEEN","ANGELIA","GABRIELLE","AUTUMN","KATHARINE","SUMMER","JODIE","STACI","LEA","CHRISTI","JIMMIE","JUSTINE","ELMA","LUELLA","MARGRET","DOMINIQUE","SOCORRO","RENE","MARTINA","MARGO","MAVIS","CALLIE","BOBBI","MARITZA","LUCILE","LEANNE","JEANNINE","DEANA","AILEEN","LORIE","LADONNA","WILLA","MANUELA","GALE","SELMA","DOLLY","SYBIL","ABBY","LARA","DALE","IVY","DEE","WINNIE","MARCY","LUISA","JERI","MAGDALENA","OFELIA","MEAGAN","AUDRA","MATILDA","LEILA","CORNELIA","BIANCA","SIMONE","BETTYE","RANDI","VIRGIE","LATISHA","BARBRA","GEORGINA","ELIZA","LEANN","BRIDGETTE","RHODA","HALEY","ADELA","NOLA","BERNADINE","FLOSSIE","ILA","GRETA","RUTHIE","NELDA","MINERVA","LILLY","TERRIE","LETHA","HILARY","ESTELA","VALARIE","BRIANNA","ROSALYN","EARLINE","CATALINA","AVA","MIA","CLARISSA","LIDIA","CORRINE","ALEXANDRIA","CONCEPCION","TIA","SHARRON","RAE","DONA","ERICKA","JAMI","ELNORA","CHANDRA","LENORE","NEVA","MARYLOU","MELISA","TABATHA","SERENA","AVIS","ALLIE","SOFIA","JEANIE","ODESSA","NANNIE","HARRIETT","LORAINE","PENELOPE","MILAGROS","EMILIA","BENITA","ALLYSON","ASHLEE","TANIA","TOMMIE","ESMERALDA","KARINA","EVE","PEARLIE","ZELMA","MALINDA","NOREEN","TAMEKA","SAUNDRA","HILLARY","AMIE","ALTHEA","ROSALINDA","JORDAN","LILIA","ALANA","GAY","CLARE","ALEJANDRA","ELINOR","MICHAEL","LORRIE","JERRI","DARCY","EARNESTINE","CARMELLA","TAYLOR","NOEMI","MARCIE","LIZA","ANNABELLE","LOUISA","EARLENE","MALLORY","CARLENE","NITA","SELENA","TANISHA","KATY","JULIANNE","JOHN","LAKISHA","EDWINA","MARICELA","MARGERY","KENYA","DOLLIE","ROXIE","ROSLYN","KATHRINE","NANETTE","CHARMAINE","LAVONNE","ILENE","KRIS","TAMMI","SUZETTE","CORINE","KAYE","JERRY","MERLE","CHRYSTAL","LINA","DEANNE","LILIAN","JULIANA","ALINE","LUANN","KASEY","MARYANNE","EVANGELINE","COLETTE","MELVA","LAWANDA","YESENIA","NADIA","MADGE","KATHIE","EDDIE","OPHELIA","VALERIA","NONA","MITZI","MARI","GEORGETTE","CLAUDINE","FRAN","ALISSA","ROSEANN","LAKEISHA","SUSANNA","REVA","DEIDRE","CHASITY","SHEREE","CARLY","JAMES","ELVIA","ALYCE","DEIRDRE","GENA","BRIANA","ARACELI","KATELYN","ROSANNE","WENDI","TESSA","BERTA","MARVA","IMELDA","MARIETTA","MARCI","LEONOR","ARLINE","SASHA","MADELYN","JANNA","JULIETTE","DEENA","AURELIA","JOSEFA","AUGUSTA","LILIANA","YOUNG","CHRISTIAN","LESSIE","AMALIA","SAVANNAH","ANASTASIA","VILMA","NATALIA","ROSELLA","LYNNETTE","CORINA","ALFREDA","LEANNA","CAREY","AMPARO","COLEEN","TAMRA","AISHA","WILDA","KARYN","CHERRY","QUEEN","MAURA","MAI","EVANGELINA","ROSANNA","HALLIE","ERNA","ENID","MARIANA","LACY","JULIET","JACKLYN","FREIDA","MADELEINE","MARA","HESTER","CATHRYN","LELIA","CASANDRA","BRIDGETT","ANGELITA","JANNIE","DIONNE","ANNMARIE","KATINA","BERYL","PHOEBE","MILLICENT","KATHERYN","DIANN","CARISSA","MARYELLEN","LIZ","LAURI","HELGA","GILDA","ADRIAN","RHEA","MARQUITA","HOLLIE","TISHA","TAMERA","ANGELIQUE","FRANCESCA","BRITNEY","KAITLIN","LOLITA","FLORINE","ROWENA","REYNA","TWILA","FANNY","JANELL","INES","CONCETTA","BERTIE","ALBA","BRIGITTE","ALYSON","VONDA","PANSY","ELBA","NOELLE","LETITIA","KITTY","DEANN","BRANDIE","LOUELLA","LETA","FELECIA","SHARLENE","LESA","BEVERLEY","ROBERT","ISABELLA","HERMINIA","TERRA","CELINA","TORI","OCTAVIA","JADE","DENICE","GERMAINE","SIERRA","MICHELL","CORTNEY","NELLY","DORETHA","SYDNEY","DEIDRA","MONIKA","LASHONDA","JUDI","CHELSEY","ANTIONETTE","MARGOT","BOBBY","ADELAIDE","NAN","LEEANN","ELISHA","DESSIE","LIBBY","KATHI","GAYLA","LATANYA","MINA","MELLISA","KIMBERLEE","JASMIN","RENAE","ZELDA","ELDA","MA","JUSTINA","GUSSIE","EMILIE","CAMILLA","ABBIE","ROCIO","KAITLYN","JESSE","EDYTHE","ASHLEIGH","SELINA","LAKESHA","GERI","ALLENE","PAMALA","MICHAELA","DAYNA","CARYN","ROSALIA","SUN","JACQULINE","REBECA","MARYBETH","KRYSTLE","IOLA","DOTTIE","BENNIE","BELLE","AUBREY","GRISELDA","ERNESTINA","ELIDA","ADRIANNE","DEMETRIA","DELMA","CHONG","JAQUELINE","DESTINY","ARLEEN","VIRGINA","RETHA","FATIMA","TILLIE","ELEANORE","CARI","TREVA","BIRDIE","WILHELMINA","ROSALEE","MAURINE","LATRICE","YONG","JENA","TARYN","ELIA","DEBBY","MAUDIE","JEANNA","DELILAH","CATRINA","SHONDA","HORTENCIA","THEODORA","TERESITA","ROBBIN","DANETTE","MARYJANE","FREDDIE","DELPHINE","BRIANNE","NILDA","DANNA","CINDI","BESS","IONA","HANNA","ARIEL","WINONA","VIDA","ROSITA","MARIANNA","WILLIAM","RACHEAL","GUILLERMINA","ELOISA","CELESTINE","CAREN","MALISSA","LONA","CHANTEL","SHELLIE","MARISELA","LEORA","AGATHA","SOLEDAD","MIGDALIA","IVETTE","CHRISTEN","ATHENA","JANEL","CHLOE","VEDA","PATTIE","TESSIE","TERA","MARILYNN","LUCRETIA","KARRIE","DINAH","DANIELA","ALECIA","ADELINA","VERNICE","SHIELA","PORTIA","MERRY","LASHAWN","DEVON","DARA","TAWANA","OMA","VERDA","CHRISTIN","ALENE","ZELLA","SANDI","RAFAELA","MAYA","KIRA","CANDIDA","ALVINA","SUZAN","SHAYLA","LYN","LETTIE","ALVA","SAMATHA","ORALIA","MATILDE","MADONNA","LARISSA","VESTA","RENITA","INDIA","DELOIS","SHANDA","PHILLIS","LORRI","ERLINDA","CRUZ","CATHRINE","BARB","ZOE","ISABELL","IONE","GISELA","CHARLIE","VALENCIA","ROXANNA","MAYME","KISHA","ELLIE","MELLISSA","DORRIS","DALIA","BELLA","ANNETTA","ZOILA","RETA","REINA","LAURETTA","KYLIE","CHRISTAL","PILAR","CHARLA","ELISSA","TIFFANI","TANA","PAULINA","LEOTA","BREANNA","JAYME","CARMEL","VERNELL","TOMASA","MANDI","DOMINGA","SANTA","MELODIE","LURA","ALEXA","TAMELA","RYAN","MIRNA","KERRIE","VENUS","NOEL","FELICITA","CRISTY","CARMELITA","BERNIECE","ANNEMARIE","TIARA","ROSEANNE","MISSY","CORI","ROXANA","PRICILLA","KRISTAL","JUNG","ELYSE","HAYDEE","ALETHA","BETTINA","MARGE","GILLIAN","FILOMENA","CHARLES","ZENAIDA","HARRIETTE","CARIDAD","VADA","UNA","ARETHA","PEARLINE","MARJORY","MARCELA","FLOR","EVETTE","ELOUISE","ALINA","TRINIDAD","DAVID","DAMARIS","CATHARINE","CARROLL","BELVA","NAKIA","MARLENA","LUANNE","LORINE","KARON","DORENE","DANITA","BRENNA","TATIANA","SAMMIE","LOUANN","LOREN","JULIANNA","ANDRIA","PHILOMENA","LUCILA","LEONORA","DOVIE","ROMONA","MIMI","JACQUELIN","GAYE","TONJA","MISTI","JOE","GENE","CHASTITY","STACIA","ROXANN","MICAELA","NIKITA","MEI","VELDA","MARLYS","JOHNNA","AURA","LAVERN","IVONNE","HAYLEY","NICKI","MAJORIE","HERLINDA","GEORGE","ALPHA","YADIRA","PERLA","GREGORIA","DANIEL","ANTONETTE","SHELLI","MOZELLE","MARIAH","JOELLE","CORDELIA","JOSETTE","CHIQUITA","TRISTA","LOUIS","LAQUITA","GEORGIANA","CANDI","SHANON","LONNIE","HILDEGARD","CECIL","VALENTINA","STEPHANY","MAGDA","KAROL","GERRY","GABRIELLA","TIANA","ROMA","RICHELLE","RAY","PRINCESS","OLETA","JACQUE","IDELLA","ALAINA","SUZANNA","JOVITA","BLAIR","TOSHA","RAVEN","NEREIDA","MARLYN","KYLA","JOSEPH","DELFINA","TENA","STEPHENIE","SABINA","NATHALIE","MARCELLE","GERTIE","DARLEEN","THEA","SHARONDA","SHANTEL","BELEN","VENESSA","ROSALINA","ONA","GENOVEVA","COREY","CLEMENTINE","ROSALBA","RENATE","RENATA","MI","IVORY","GEORGIANNA","FLOY","DORCAS","ARIANA","TYRA","THEDA","MARIAM","JULI","JESICA","DONNIE","VIKKI","VERLA","ROSELYN","MELVINA","JANNETTE","GINNY","DEBRAH","CORRIE","ASIA","VIOLETA","MYRTIS","LATRICIA","COLLETTE","CHARLEEN","ANISSA","VIVIANA","TWYLA","PRECIOUS","NEDRA","LATONIA","LAN","HELLEN","FABIOLA","ANNAMARIE","ADELL","SHARYN","CHANTAL","NIKI","MAUD","LIZETTE","LINDY","KIA","KESHA","JEANA","DANELLE","CHARLINE","CHANEL","CARROL","VALORIE","LIA","DORTHA","CRISTAL","SUNNY","LEONE","LEILANI","GERRI","DEBI","ANDRA","KESHIA","IMA","EULALIA","EASTER","DULCE","NATIVIDAD","LINNIE","KAMI","GEORGIE","CATINA","BROOK","ALDA","WINNIFRED","SHARLA","RUTHANN","MEAGHAN","MAGDALENE","LISSETTE","ADELAIDA","VENITA","TRENA","SHIRLENE","SHAMEKA","ELIZEBETH","DIAN","SHANTA","MICKEY","LATOSHA","CARLOTTA","WINDY","SOON","ROSINA","MARIANN","LEISA","JONNIE","DAWNA","CATHIE","BILLY","ASTRID","SIDNEY","LAUREEN","JANEEN","HOLLI","FAWN","VICKEY","TERESSA","SHANTE","RUBYE","MARCELINA","CHANDA","CARY","TERESE","SCARLETT","MARTY","MARNIE","LULU","LISETTE","JENIFFER","ELENOR","DORINDA","DONITA","CARMAN","BERNITA","ALTAGRACIA","ALETA","ADRIANNA","ZORAIDA","RONNIE","NICOLA","LYNDSEY","KENDALL","JANINA","CHRISSY","AMI","STARLA","PHYLIS","PHUONG","KYRA","CHARISSE","BLANCH","SANJUANITA","RONA","NANCI","MARILEE","MARANDA","CORY","BRIGETTE","SANJUANA","MARITA","KASSANDRA","JOYCELYN","IRA","FELIPA","CHELSIE","BONNY","MIREYA","LORENZA","KYONG","ILEANA","CANDELARIA","TONY","TOBY","SHERIE","OK","MARK","LUCIE","LEATRICE","LAKESHIA","GERDA","EDIE","BAMBI","MARYLIN","LAVON","HORTENSE","GARNET","EVIE","TRESSA","SHAYNA","LAVINA","KYUNG","JEANETTA","SHERRILL","SHARA","PHYLISS","MITTIE","ANABEL","ALESIA","THUY","TAWANDA","RICHARD","JOANIE","TIFFANIE","LASHANDA","KARISSA","ENRIQUETA","DARIA","DANIELLA","CORINNA","ALANNA","ABBEY","ROXANE","ROSEANNA","MAGNOLIA","LIDA","KYLE","JOELLEN","ERA","CORAL","CARLEEN","TRESA","PEGGIE","NOVELLA","NILA","MAYBELLE","JENELLE","CARINA","NOVA","MELINA","MARQUERITE","MARGARETTE","JOSEPHINA","EVONNE","DEVIN","CINTHIA","ALBINA","TOYA","TAWNYA","SHERITA","SANTOS","MYRIAM","LIZABETH","LISE","KEELY","JENNI","GISELLE","CHERYLE","ARDITH","ARDIS","ALESHA","ADRIANE","SHAINA","LINNEA","KAROLYN","HONG","FLORIDA","FELISHA","DORI","DARCI","ARTIE","ARMIDA","ZOLA","XIOMARA","VERGIE","SHAMIKA","NENA","NANNETTE","MAXIE","LOVIE","JEANE","JAIMIE","INGE","FARRAH","ELAINA","CAITLYN","STARR","FELICITAS","CHERLY","CARYL","YOLONDA","YASMIN","TEENA","PRUDENCE","PENNIE","NYDIA","MACKENZIE","ORPHA","MARVEL","LIZBETH","LAURETTE","JERRIE","HERMELINDA","CAROLEE","TIERRA","MIRIAN","META","MELONY","KORI","JENNETTE","JAMILA","ENA","ANH","YOSHIKO","SUSANNAH","SALINA","RHIANNON","JOLEEN","CRISTINE","ASHTON","ARACELY","TOMEKA","SHALONDA","MARTI","LACIE","KALA","JADA","ILSE","HAILEY","BRITTANI","ZONA","SYBLE","SHERRYL","RANDY","NIDIA","MARLO","KANDICE","KANDI","DEB","DEAN","AMERICA","ALYCIA","TOMMY","RONNA","NORENE","MERCY","JOSE","INGEBORG","GIOVANNA","GEMMA","CHRISTEL","AUDRY","ZORA","VITA","VAN","TRISH","STEPHAINE","SHIRLEE","SHANIKA","MELONIE","MAZIE","JAZMIN","INGA","HOA","HETTIE","GERALYN","FONDA","ESTRELLA","ADELLA","SU","SARITA","RINA","MILISSA","MARIBETH","GOLDA","EVON","ETHELYN","ENEDINA","CHERISE","CHANA","VELVA","TAWANNA","SADE","MIRTA","LI","KARIE","JACINTA","ELNA","DAVINA","CIERRA","ASHLIE","ALBERTHA","TANESHA","STEPHANI","NELLE","MINDI","LU","LORINDA","LARUE","FLORENE","DEMETRA","DEDRA","CIARA","CHANTELLE","ASHLY","SUZY","ROSALVA","NOELIA","LYDA","LEATHA","KRYSTYNA","KRISTAN","KARRI","DARLINE","DARCIE","CINDA","CHEYENNE","CHERRIE","AWILDA","ALMEDA","ROLANDA","LANETTE","JERILYN","GISELE","EVALYN","CYNDI","CLETA","CARIN","ZINA","ZENA","VELIA","TANIKA","PAUL","CHARISSA","THOMAS","TALIA","MARGARETE","LAVONDA","KAYLEE","KATHLENE","JONNA","IRENA","ILONA","IDALIA","CANDIS","CANDANCE","BRANDEE"]
	inputlist2 = ["ANITRA","ALIDA","SIGRID","NICOLETTE","MARYJO","LINETTE","HEDWIG","CHRISTIANA","CASSIDY","ALEXIA","TRESSIE","MODESTA","LUPITA","LITA","GLADIS","EVELIA","DAVIDA","CHERRI","CECILY","ASHELY","ANNABEL","AGUSTINA","WANITA","SHIRLY","ROSAURA","HULDA","EUN","BAILEY","YETTA","VERONA","THOMASINA","SIBYL","SHANNAN","MECHELLE","LUE","LEANDRA","LANI","KYLEE","KANDY","JOLYNN","FERNE","EBONI","CORENE","ALYSIA","ZULA","NADA","MOIRA","LYNDSAY","LORRETTA","JUAN","JAMMIE","HORTENSIA","GAYNELL","CAMERON","ADRIA","VINA","VICENTA","TANGELA","STEPHINE","NORINE","NELLA","LIANA","LESLEE","KIMBERELY","ILIANA","GLORY","FELICA","EMOGENE","ELFRIEDE","EDEN","EARTHA","CARMA","BEA","OCIE","MARRY","LENNIE","KIARA","JACALYN","CARLOTA","ARIELLE","YU","STAR","OTILIA","KIRSTIN","KACEY","JOHNETTA","JOEY","JOETTA","JERALDINE","JAUNITA","ELANA","DORTHEA","CAMI","AMADA","ADELIA","VERNITA","TAMAR","SIOBHAN","RENEA","RASHIDA","OUIDA","ODELL","NILSA","MERYL","KRISTYN","JULIETA","DANICA","BREANNE","AUREA","ANGLEA","SHERRON","ODETTE","MALIA","LORELEI","LIN","LEESA","KENNA","KATHLYN","FIONA","CHARLETTE","SUZIE","SHANTELL","SABRA","RACQUEL","MYONG","MIRA","MARTINE","LUCIENNE","LAVADA","JULIANN","JOHNIE","ELVERA","DELPHIA","CLAIR","CHRISTIANE","CHAROLETTE","CARRI","AUGUSTINE","ASHA","ANGELLA","PAOLA","NINFA","LEDA","LAI","EDA","SUNSHINE","STEFANI","SHANELL","PALMA","MACHELLE","LISSA","KECIA","KATHRYNE","KARLENE","JULISSA","JETTIE","JENNIFFER","HUI","CORRINA","CHRISTOPHER","CAROLANN","ALENA","TESS","ROSARIA","MYRTICE","MARYLEE","LIANE","KENYATTA","JUDIE","JANEY","IN","ELMIRA","ELDORA","DENNA","CRISTI","CATHI","ZAIDA","VONNIE","VIVA","VERNIE","ROSALINE","MARIELA","LUCIANA","LESLI","KARAN","FELICE","DENEEN","ADINA","WYNONA","TARSHA","SHERON","SHASTA","SHANITA","SHANI","SHANDRA","RANDA","PINKIE","PARIS","NELIDA","MARILOU","LYLA","LAURENE","LACI","JOI","JANENE","DOROTHA","DANIELE","DANI","CAROLYNN","CARLYN","BERENICE","AYESHA","ANNELIESE","ALETHEA","THERSA","TAMIKO","RUFINA","OLIVA","MOZELL","MARYLYN","MADISON","KRISTIAN","KATHYRN","KASANDRA","KANDACE","JANAE","GABRIEL","DOMENICA","DEBBRA","DANNIELLE","CHUN","BUFFY","BARBIE","ARCELIA","AJA","ZENOBIA","SHAREN","SHAREE","PATRICK","PAGE","MY","LAVINIA","KUM","KACIE","JACKELINE","HUONG","FELISA","EMELIA","ELEANORA","CYTHIA","CRISTIN","CLYDE","CLARIBEL","CARON","ANASTACIA","ZULMA","ZANDRA","YOKO","TENISHA","SUSANN","SHERILYN","SHAY","SHAWANDA","SABINE","ROMANA","MATHILDA","LINSEY","KEIKO","JOANA","ISELA","GRETTA","GEORGETTA","EUGENIE","DUSTY","DESIRAE","DELORA","CORAZON","ANTONINA","ANIKA","WILLENE","TRACEE","TAMATHA","REGAN","NICHELLE","MICKIE","MAEGAN","LUANA","LANITA","KELSIE","EDELMIRA","BREE","AFTON","TEODORA","TAMIE","SHENA","MEG","LINH","KELI","KACI","DANYELLE","BRITT","ARLETTE","ALBERTINE","ADELLE","TIFFINY","STORMY","SIMONA","NUMBERS","NICOLASA","NICHOL","NIA","NAKISHA","MEE","MAIRA","LOREEN","KIZZY","JOHNNY","JAY","FALLON","CHRISTENE","BOBBYE","ANTHONY","YING","VINCENZA","TANJA","RUBIE","RONI","QUEENIE","MARGARETT","KIMBERLI","IRMGARD","IDELL","HILMA","EVELINA","ESTA","EMILEE","DENNISE","DANIA","CARL","CARIE","ANTONIO","WAI","SANG","RISA","RIKKI","PARTICIA","MUI","MASAKO","MARIO","LUVENIA","LOREE","LONI","LIEN","KEVIN","GIGI","FLORENCIA","DORIAN","DENITA","DALLAS","CHI","BILLYE","ALEXANDER","TOMIKA","SHARITA","RANA","NIKOLE","NEOMA","MARGARITE","MADALYN","LUCINA","LAILA","KALI","JENETTE","GABRIELE","EVELYNE","ELENORA","CLEMENTINA","ALEJANDRINA","ZULEMA","VIOLETTE","VANNESSA","THRESA","RETTA","PIA","PATIENCE","NOELLA","NICKIE","JONELL","DELTA","CHUNG","CHAYA","CAMELIA","BETHEL","ANYA","ANDREW","THANH","SUZANN","SPRING","SHU","MILA","LILLA","LAVERNA","KEESHA","KATTIE","GIA","GEORGENE","EVELINE","ESTELL","ELIZBETH","VIVIENNE","VALLIE","TRUDIE","STEPHANE","MICHEL","MAGALY","MADIE","KENYETTA","KARREN","JANETTA","HERMINE","HARMONY","DRUCILLA","DEBBI","CELESTINA","CANDIE","BRITNI","BECKIE","AMINA","ZITA","YUN","YOLANDE","VIVIEN","VERNETTA","TRUDI","SOMMER","PEARLE","PATRINA","OSSIE","NICOLLE","LOYCE","LETTY","LARISA","KATHARINA","JOSELYN","JONELLE","JENELL","IESHA","HEIDE","FLORINDA","FLORENTINA","FLO","ELODIA","DORINE","BRUNILDA","BRIGID","ASHLI","ARDELLA","TWANA","THU","TARAH","SUNG","SHEA","SHAVON","SHANE","SERINA","RAYNA","RAMONITA","NGA","MARGURITE","LUCRECIA","KOURTNEY","KATI","JESUS","JESENIA","DIAMOND","CRISTA","AYANA","ALICA","ALIA","VINNIE","SUELLEN","ROMELIA","RACHELL","PIPER","OLYMPIA","MICHIKO","KATHALEEN","JOLIE","JESSI","JANESSA","HANA","HA","ELEASE","CARLETTA","BRITANY","SHONA","SALOME","ROSAMOND","REGENA","RAINA","NGOC","NELIA","LOUVENIA","LESIA","LATRINA","LATICIA","LARHONDA","JINA","JACKI","HOLLIS","HOLLEY","EMMY","DEEANN","CORETTA","ARNETTA","VELVET","THALIA","SHANICE","NETA","MIKKI","MICKI","LONNA","LEANA","LASHUNDA","KILEY","JOYE","JACQULYN","IGNACIA","HYUN","HIROKO","HENRY","HENRIETTE","ELAYNE","DELINDA","DARNELL","DAHLIA","COREEN","CONSUELA","CONCHITA","CELINE","BABETTE","AYANNA","ANETTE","ALBERTINA","SKYE","SHAWNEE","SHANEKA","QUIANA","PAMELIA","MIN","MERRI","MERLENE","MARGIT","KIESHA","KIERA","KAYLENE","JODEE","JENISE","ERLENE","EMMIE","ELSE","DARYL","DALILA","DAISEY","CODY","CASIE","BELIA","BABARA","VERSIE","VANESA","SHELBA","SHAWNDA","SAM","NORMAN","NIKIA","NAOMA","MARNA","MARGERET","MADALINE","LAWANA","KINDRA","JUTTA","JAZMINE","JANETT","HANNELORE","GLENDORA","GERTRUD","GARNETT","FREEDA","FREDERICA","FLORANCE","FLAVIA","DENNIS","CARLINE","BEVERLEE","ANJANETTE","VALDA","TRINITY","TAMALA","STEVIE","SHONNA","SHA","SARINA","ONEIDA","MICAH","MERILYN","MARLEEN","LURLINE","LENNA","KATHERIN","JIN","JENI","HAE","GRACIA","GLADY","FARAH","ERIC","ENOLA","EMA","DOMINQUE","DEVONA","DELANA","CECILA","CAPRICE","ALYSHA","ALI","ALETHIA","VENA","THERESIA","TAWNY","SONG","SHAKIRA","SAMARA","SACHIKO","RACHELE","PAMELLA","NICKY","MARNI","MARIEL","MAREN","MALISA","LIGIA","LERA","LATORIA","LARAE","KIMBER","KATHERN","KAREY","JENNEFER","JANETH","HALINA","FREDIA","DELISA","DEBROAH","CIERA","CHIN","ANGELIKA","ANDREE","ALTHA","YEN","VIVAN","TERRESA","TANNA","SUK","SUDIE","SOO","SIGNE","SALENA","RONNI","REBBECCA","MYRTIE","MCKENZIE","MALIKA","MAIDA","LOAN","LEONARDA","KAYLEIGH","FRANCE","ETHYL","ELLYN","DAYLE","CAMMIE","BRITTNI","BIRGIT","AVELINA","ASUNCION","ARIANNA","AKIKO","VENICE","TYESHA","TONIE","TIESHA","TAKISHA","STEFFANIE","SINDY","SANTANA","MEGHANN","MANDA","MACIE","LADY","KELLYE","KELLEE","JOSLYN","JASON","INGER","INDIRA","GLINDA","GLENNIS","FERNANDA","FAUSTINA","ENEIDA","ELICIA","DOT","DIGNA","DELL","ARLETTA","ANDRE","WILLIA","TAMMARA","TABETHA","SHERRELL","SARI","REFUGIO","REBBECA","PAULETTA","NIEVES","NATOSHA","NAKITA","MAMMIE","KENISHA","KAZUKO","KASSIE","GARY","EARLEAN","DAPHINE","CORLISS","CLOTILDE","CAROLYNE","BERNETTA","AUGUSTINA","AUDREA","ANNIS","ANNABELL","YAN","TENNILLE","TAMICA","SELENE","SEAN","ROSANA","REGENIA","QIANA","MARKITA","MACY","LEEANNE","LAURINE","KYM","JESSENIA","JANITA","GEORGINE","GENIE","EMIKO","ELVIE","DEANDRA","DAGMAR","CORIE","COLLEN","CHERISH","ROMAINE","PORSHA","PEARLENE","MICHELINE","MERNA","MARGORIE","MARGARETTA","LORE","KENNETH","JENINE","HERMINA","FREDERICKA","ELKE","DRUSILLA","DORATHY","DIONE","DESIRE","CELENA","BRIGIDA","ANGELES","ALLEGRA","THEO","TAMEKIA","SYNTHIA","STEPHEN","SOOK","SLYVIA","ROSANN","REATHA","RAYE","MARQUETTA","MARGART","LING","LAYLA","KYMBERLY","KIANA","KAYLEEN","KATLYN","KARMEN","JOELLA","IRINA","EMELDA","ELENI","DETRA","CLEMMIE","CHERYLL","CHANTELL","CATHEY","ARNITA","ARLA","ANGLE","ANGELIC","ALYSE","ZOFIA","THOMASINE","TENNIE","SON","SHERLY","SHERLEY","SHARYL","REMEDIOS","PETRINA","NICKOLE","MYUNG","MYRLE","MOZELLA","LOUANNE","LISHA","LATIA","LANE","KRYSTA","JULIENNE","JOEL","JEANENE","JACQUALINE","ISAURA","GWENDA","EARLEEN","DONALD","CLEOPATRA","CARLIE","AUDIE","ANTONIETTA","ALISE","ALEX","VERDELL","VAL","TYLER","TOMOKO","THAO","TALISHA","STEVEN","SO","SHEMIKA","SHAUN","SCARLET","SAVANNA","SANTINA","ROSIA","RAEANN","ODILIA","NANA","MINNA","MAGAN","LYNELLE","LE","KARMA","JOEANN","IVANA","INELL","ILANA","HYE","HONEY","HEE","GUDRUN","FRANK","DREAMA","CRISSY","CHANTE","CARMELINA","ARVILLA","ARTHUR","ANNAMAE","ALVERA","ALEIDA","AARON","YEE","YANIRA","VANDA","TIANNA","TAM","STEFANIA","SHIRA","PERRY","NICOL","NANCIE","MONSERRATE","MINH","MELYNDA","MELANY","MATTHEW","LOVELLA","LAURE","KIRBY","KACY","JACQUELYNN","HYON","GERTHA","FRANCISCO","ELIANA","CHRISTENA","CHRISTEEN","CHARISE","CATERINA","CARLEY","CANDYCE","ARLENA","AMMIE","YANG","WILLETTE","VANITA","TUYET","TINY","SYREETA","SILVA","SCOTT","RONALD","PENNEY","NYLA","MICHAL","MAURICE","MARYAM","MARYA","MAGEN","LUDIE","LOMA","LIVIA","LANELL","KIMBERLIE","JULEE","DONETTA","DIEDRA","DENISHA","DEANE","DAWNE","CLARINE","CHERRYL","BRONWYN","BRANDON","ALLA","VALERY","TONDA","SUEANN","SORAYA","SHOSHANA","SHELA","SHARLEEN","SHANELLE","NERISSA","MICHEAL","MERIDITH","MELLIE","MAYE","MAPLE","MAGARET","LUIS","LILI","LEONILA","LEONIE","LEEANNA","LAVONIA","LAVERA","KRISTEL","KATHEY","KATHE","JUSTIN","JULIAN","JIMMY","JANN","ILDA","HILDRED","HILDEGARDE","GENIA","FUMIKO","EVELIN","ERMELINDA","ELLY","DUNG","DOLORIS","DIONNA","DANAE","BERNEICE","ANNICE","ALIX","VERENA","VERDIE","TRISTAN","SHAWNNA","SHAWANA","SHAUNNA","ROZELLA","RANDEE","RANAE","MILAGRO","LYNELL","LUISE","LOUIE","LOIDA","LISBETH","KARLEEN","JUNITA","JONA","ISIS","HYACINTH","HEDY","GWENN","ETHELENE","ERLINE","EDWARD","DONYA","DOMONIQUE","DELICIA","DANNETTE","CICELY","BRANDA","BLYTHE","BETHANN","ASHLYN","ANNALEE","ALLINE","YUKO","VELLA","TRANG","TOWANDA","TESHA","SHERLYN","NARCISA","MIGUELINA","MERI","MAYBELL","MARLANA","MARGUERITA","MADLYN","LUNA","LORY","LORIANN","LIBERTY","LEONORE","LEIGHANN","LAURICE","LATESHA","LARONDA","KATRICE","KASIE","KARL","KALEY","JADWIGA","GLENNIE","GEARLDINE","FRANCINA","EPIFANIA","DYAN","DORIE","DIEDRE","DENESE","DEMETRICE","DELENA","DARBY","CRISTIE","CLEORA","CATARINA","CARISA","BERNIE","BARBERA","ALMETA","TRULA","TEREASA","SOLANGE","SHEILAH","SHAVONNE","SANORA","ROCHELL","MATHILDE","MARGARETA","MAIA","LYNSEY","LAWANNA","LAUNA","KENA","KEENA","KATIA","JAMEY","GLYNDA","GAYLENE","ELVINA","ELANOR","DANUTA","DANIKA","CRISTEN","CORDIE","COLETTA","CLARITA","CARMON","BRYNN","AZUCENA","AUNDREA","ANGELE","YI","WALTER","VERLIE","VERLENE","TAMESHA","SILVANA","SEBRINA","SAMIRA","REDA","RAYLENE","PENNI","PANDORA","NORAH","NOMA","MIREILLE","MELISSIA","MARYALICE","LARAINE","KIMBERY","KARYL","KARINE","KAM","JOLANDA","JOHANA","JESUSA","JALEESA","JAE","JACQUELYNE","IRISH","ILUMINADA","HILARIA","HANH","GENNIE","FRANCIE","FLORETTA","EXIE","EDDA","DREMA","DELPHA","BEV","BARBAR","ASSUNTA","ARDELL","ANNALISA","ALISIA","YUKIKO","YOLANDO","WONDA","WEI","WALTRAUD","VETA","TEQUILA","TEMEKA","TAMEIKA","SHIRLEEN","SHENITA","PIEDAD","OZELLA","MIRTHA","MARILU","KIMIKO","JULIANE","JENICE","JEN","JANAY","JACQUILINE","HILDE","FE","FAE","EVAN","EUGENE","ELOIS","ECHO","DEVORAH","CHAU","BRINDA","BETSEY","ARMINDA","ARACELIS","APRYL","ANNETT","ALISHIA","VEOLA","USHA","TOSHIKO","THEOLA","TASHIA","TALITHA","SHERY","RUDY","RENETTA","REIKO","RASHEEDA","OMEGA","OBDULIA","MIKA","MELAINE","MEGGAN","MARTIN","MARLEN","MARGET","MARCELINE","MANA","MAGDALEN","LIBRADA","LEZLIE","LEXIE","LATASHIA","LASANDRA","KELLE","ISIDRA","ISA","INOCENCIA","GWYN","FRANCOISE","ERMINIA","ERINN","DIMPLE","DEVORA","CRISELDA","ARMANDA","ARIE","ARIANE","ANGELO","ANGELENA","ALLEN","ALIZA","ADRIENE","ADALINE","XOCHITL","TWANNA","TRAN","TOMIKO","TAMISHA","TAISHA","SUSY","SIU","RUTHA","ROXY","RHONA","RAYMOND","OTHA","NORIKO","NATASHIA","MERRIE","MELVIN","MARINDA","MARIKO","MARGERT","LORIS","LIZZETTE","LEISHA","KAILA","KA","JOANNIE","JERRICA","JENE","JANNET","JANEE","JACINDA","HERTA","ELENORE","DORETTA","DELAINE","DANIELL","CLAUDIE","CHINA","BRITTA","APOLONIA","AMBERLY","ALEASE","YURI","YUK","WEN","WANETA","UTE","TOMI","SHARRI","SANDIE","ROSELLE","REYNALDA","RAGUEL","PHYLICIA","PATRIA","OLIMPIA","ODELIA","MITZIE","MITCHELL","MISS","MINDA","MIGNON","MICA","MENDY","MARIVEL","MAILE","LYNETTA","LAVETTE","LAURYN","LATRISHA","LAKIESHA","KIERSTEN","KARY","JOSPHINE","JOLYN","JETTA","JANISE","JACQUIE","IVELISSE","GLYNIS","GIANNA","GAYNELLE","EMERALD","DEMETRIUS","DANYELL","DANILLE","DACIA","CORALEE","CHER","CEOLA","BRETT","BELL","ARIANNE","ALESHIA","YUNG","WILLIEMAE","TROY","TRINH","THORA","TAI","SVETLANA","SHERIKA","SHEMEKA","SHAUNDA","ROSELINE","RICKI","MELDA","MALLIE","LAVONNA","LATINA","LARRY","LAQUANDA","LALA","LACHELLE","KLARA","KANDIS","JOHNA","JEANMARIE","JAYE","HANG","GRAYCE","GERTUDE","EMERITA","EBONIE","CLORINDA","CHING","CHERY","CAROLA","BREANN","BLOSSOM","BERNARDINE","BECKI","ARLETHA","ARGELIA","ARA","ALITA","YULANDA","YON","YESSENIA","TOBI","TASIA","SYLVIE","SHIRL","SHIRELY","SHERIDAN","SHELLA","SHANTELLE","SACHA","ROYCE","REBECKA","REAGAN","PROVIDENCIA","PAULENE","MISHA","MIKI","MARLINE","MARICA","LORITA","LATOYIA","LASONYA","KERSTIN","KENDA","KEITHA","KATHRIN","JAYMIE","JACK","GRICELDA","GINETTE","ERYN","ELINA","ELFRIEDA","DANYEL","CHEREE","CHANELLE","BARRIE","AVERY","AURORE","ANNAMARIA","ALLEEN","AILENE","AIDE","YASMINE","VASHTI","VALENTINE","TREASA","TORY","TIFFANEY","SHERYLL","SHARIE","SHANAE","SAU","RAISA","PA","NEDA","MITSUKO","MIRELLA","MILDA","MARYANNA","MARAGRET","MABELLE","LUETTA","LORINA","LETISHA","LATARSHA","LANELLE","LAJUANA","KRISSY","KARLY","KARENA","JON","JESSIKA","JERICA","JEANELLE","JANUARY","JALISA","JACELYN","IZOLA","IVEY","GREGORY","EUNA","ETHA","DREW","DOMITILA","DOMINICA","DAINA","CREOLA","CARLI","CAMIE","BUNNY","BRITTNY","ASHANTI","ANISHA","ALEEN","ADAH","YASUKO","WINTER","VIKI","VALRIE","TONA","TINISHA","THI","TERISA","TATUM","TANEKA","SIMONNE","SHALANDA","SERITA","RESSIE","REFUGIA","PAZ","OLENE","NA","MERRILL","MARGHERITA","MANDIE","MAN","MAIRE","LYNDIA","LUCI","LORRIANE","LORETA","LEONIA","LAVONA","LASHAWNDA","LAKIA","KYOKO","KRYSTINA","KRYSTEN","KENIA","KELSI","JUDE","JEANICE","ISOBEL","GEORGIANN","GENNY","FELICIDAD","EILENE","DEON","DELOISE","DEEDEE","DANNIE","CONCEPTION","CLORA","CHERILYN","CHANG","CALANDRA","BERRY","ARMANDINA","ANISA","ULA","TIMOTHY","TIERA","THERESSA","STEPHANIA","SIMA","SHYLA","SHONTA","SHERA","SHAQUITA","SHALA","SAMMY","ROSSANA","NOHEMI","NERY","MORIAH","MELITA","MELIDA","MELANI","MARYLYNN","MARISHA","MARIETTE","MALORIE","MADELENE","LUDIVINA","LORIA","LORETTE","LORALEE","LIANNE","LEON","LAVENIA","LAURINDA","LASHON","KIT","KIMI","KEILA","KATELYNN","KAI","JONE","JOANE","JI","JAYNA","JANELLA","JA","HUE","HERTHA","FRANCENE","ELINORE","DESPINA","DELSIE","DEEDRA","CLEMENCIA","CARRY","CAROLIN","CARLOS","BULAH","BRITTANIE","BOK","BLONDELL","BIBI","BEAULAH","BEATA","ANNITA","AGRIPINA","VIRGEN","VALENE","UN","TWANDA","TOMMYE","TOI","TARRA","TARI","TAMMERA","SHAKIA","SADYE","RUTHANNE","ROCHEL","RIVKA","PURA","NENITA","NATISHA","MING","MERRILEE","MELODEE","MARVIS","LUCILLA","LEENA","LAVETA","LARITA","LANIE","KEREN","ILEEN","GEORGEANN","GENNA","GENESIS","FRIDA","EWA","EUFEMIA","EMELY","ELA","EDYTH","DEONNA","DEADRA","DARLENA","CHANELL","CHAN","CATHERN","CASSONDRA","CASSAUNDRA","BERNARDA","BERNA","ARLINDA","ANAMARIA","ALBERT","WESLEY","VERTIE","VALERI","TORRI","TATYANA","STASIA","SHERISE","SHERILL","SEASON","SCOTTIE","SANDA","RUTHE","ROSY","ROBERTO","ROBBI","RANEE","QUYEN","PEARLY","PALMIRA","ONITA","NISHA","NIESHA","NIDA","NEVADA","NAM","MERLYN","MAYOLA","MARYLOUISE","MARYLAND","MARX","MARTH","MARGENE","MADELAINE","LONDA","LEONTINE","LEOMA","LEIA","LAWRENCE","LAURALEE","LANORA","LAKITA","KIYOKO","KETURAH","KATELIN","KAREEN","JONIE","JOHNETTE","JENEE","JEANETT","IZETTA","HIEDI","HEIKE","HASSIE","HAROLD","GIUSEPPINA","GEORGANN","FIDELA","FERNANDE","ELWANDA","ELLAMAE","ELIZ","DUSTI","DOTTY","CYNDY","CORALIE","CELESTA","ARGENTINA","ALVERTA","XENIA","WAVA","VANETTA","TORRIE","TASHINA","TANDY","TAMBRA","TAMA","STEPANIE","SHILA","SHAUNTA","SHARAN","SHANIQUA","SHAE","SETSUKO","SERAFINA","SANDEE","ROSAMARIA","PRISCILA","OLINDA","NADENE","MUOI","MICHELINA","MERCEDEZ","MARYROSE","MARIN","MARCENE","MAO","MAGALI","MAFALDA","LOGAN","LINN","LANNIE","KAYCE","KAROLINE","KAMILAH","KAMALA","JUSTA","JOLINE","JENNINE","JACQUETTA","IRAIDA","GERALD","GEORGEANNA","FRANCHESCA","FAIRY","EMELINE","ELANE","EHTEL","EARLIE","DULCIE","DALENE","CRIS","CLASSIE","CHERE","CHARIS","CAROYLN","CARMINA","CARITA","BRIAN","BETHANIE","AYAKO","ARICA","AN","ALYSA","ALESSANDRA","AKILAH","ADRIEN","ZETTA","YOULANDA","YELENA","YAHAIRA","XUAN","WENDOLYN","VICTOR","TIJUANA","TERRELL","TERINA","TERESIA","SUZI","SUNDAY","SHERELL","SHAVONDA"]
	inputlist3 = ["SHAUNTE","SHARDA","SHAKITA","SENA","RYANN","RUBI","RIVA","REGINIA","REA","RACHAL","PARTHENIA","PAMULA","MONNIE","MONET","MICHAELE","MELIA","MARINE","MALKA","MAISHA","LISANDRA","LEO","LEKISHA","LEAN","LAURENCE","LAKENDRA","KRYSTIN","KORTNEY","KIZZIE","KITTIE","KERA","KENDAL","KEMBERLY","KANISHA","JULENE","JULE","JOSHUA","JOHANNE","JEFFREY","JAMEE","HAN","HALLEY","GIDGET","GALINA","FREDRICKA","FLETA","FATIMAH","EUSEBIA","ELZA","ELEONORE","DORTHEY","DORIA","DONELLA","DINORAH","DELORSE","CLARETHA","CHRISTINIA","CHARLYN","BONG","BELKIS","AZZIE","ANDERA","AIKO","ADENA","YER","YAJAIRA","WAN","VANIA","ULRIKE","TOSHIA","TIFANY","STEFANY","SHIZUE","SHENIKA","SHAWANNA","SHAROLYN","SHARILYN","SHAQUANA","SHANTAY","SEE","ROZANNE","ROSELEE","RICKIE","REMONA","REANNA","RAELENE","QUINN","PHUNG","PETRONILA","NATACHA","NANCEY","MYRL","MIYOKO","MIESHA","MERIDETH","MARVELLA","MARQUITTA","MARHTA","MARCHELLE","LIZETH","LIBBIE","LAHOMA","LADAWN","KINA","KATHELEEN","KATHARYN","KARISA","KALEIGH","JUNIE","JULIEANN","JOHNSIE","JANEAN","JAIMEE","JACKQUELINE","HISAKO","HERMA","HELAINE","GWYNETH","GLENN","GITA","EUSTOLIA","EMELINA","ELIN","EDRIS","DONNETTE","DONNETTA","DIERDRE","DENAE","DARCEL","CLAUDE","CLARISA","CINDERELLA","CHIA","CHARLESETTA","CHARITA","CELSA","CASSY","CASSI","CARLEE","BRUNA","BRITTANEY","BRANDE","BILLI","BAO","ANTONETTA","ANGLA","ANGELYN","ANALISA","ALANE","WENONA","WENDIE","VERONIQUE","VANNESA","TOBIE","TEMPIE","SUMIKO","SULEMA","SPARKLE","SOMER","SHEBA","SHAYNE","SHARICE","SHANEL","SHALON","SAGE","ROY","ROSIO","ROSELIA","RENAY","REMA","REENA","PORSCHE","PING","PEG","OZIE","ORETHA","ORALEE","ODA","NU","NGAN","NAKESHA","MILLY","MARYBELLE","MARLIN","MARIS","MARGRETT","MARAGARET","MANIE","LURLENE","LILLIA","LIESELOTTE","LAVELLE","LASHAUNDA","LAKEESHA","KEITH","KAYCEE","KALYN","JOYA","JOETTE","JENAE","JANIECE","ILLA","GRISEL","GLAYDS","GENEVIE","GALA","FREDDA","FRED","ELMER","ELEONOR","DEBERA","DEANDREA","DAN","CORRINNE","CORDIA","CONTESSA","COLENE","CLEOTILDE","CHARLOTT","CHANTAY","CECILLE","BEATRIS","AZALEE","ARLEAN","ARDATH","ANJELICA","ANJA","ALFREDIA","ALEISHA","ADAM","ZADA","YUONNE","XIAO","WILLODEAN","WHITLEY","VENNIE","VANNA","TYISHA","TOVA","TORIE","TONISHA","TILDA","TIEN","TEMPLE","SIRENA","SHERRIL","SHANTI","SHAN","SENAIDA","SAMELLA","ROBBYN","RENDA","REITA","PHEBE","PAULITA","NOBUKO","NGUYET","NEOMI","MOON","MIKAELA","MELANIA","MAXIMINA","MARG","MAISIE","LYNNA","LILLI","LAYNE","LASHAUN","LAKENYA","LAEL","KIRSTIE","KATHLINE","KASHA","KARLYN","KARIMA","JOVAN","JOSEFINE","JENNELL","JACQUI","JACKELYN","HYO","HIEN","GRAZYNA","FLORRIE","FLORIA","ELEONORA","DWANA","DORLA","DONG","DELMY","DEJA","DEDE","DANN","CRYSTA","CLELIA","CLARIS","CLARENCE","CHIEKO","CHERLYN","CHERELLE","CHARMAIN","CHARA","CAMMY","BEE","ARNETTE","ARDELLE","ANNIKA","AMIEE","AMEE","ALLENA","YVONE","YUKI","YOSHIE","YEVETTE","YAEL","WILLETTA","VONCILE","VENETTA","TULA","TONETTE","TIMIKA","TEMIKA","TELMA","TEISHA","TAREN","TA","STACEE","SHIN","SHAWNTA","SATURNINA","RICARDA","POK","PASTY","ONIE","NUBIA","MORA","MIKE","MARIELLE","MARIELLA","MARIANELA","MARDELL","MANY","LUANNA","LOISE","LISABETH","LINDSY","LILLIANA","LILLIAM","LELAH","LEIGHA","LEANORA","LANG","KRISTEEN","KHALILAH","KEELEY","KANDRA","JUNKO","JOAQUINA","JERLENE","JANI","JAMIKA","JAME","HSIU","HERMILA","GOLDEN","GENEVIVE","EVIA","EUGENA","EMMALINE","ELFREDA","ELENE","DONETTE","DELCIE","DEEANNA","DARCEY","CUC","CLARINDA","CIRA","CHAE","CELINDA","CATHERYN","CATHERIN","CASIMIRA","CARMELIA","CAMELLIA","BREANA","BOBETTE","BERNARDINA","BEBE","BASILIA","ARLYNE","AMAL","ALAYNA","ZONIA","ZENIA","YURIKO","YAEKO","WYNELL","WILLOW","WILLENA","VERNIA","TU","TRAVIS","TORA","TERRILYN","TERICA","TENESHA","TAWNA","TAJUANA","TAINA","STEPHNIE","SONA","SOL","SINA","SHONDRA","SHIZUKO","SHERLENE","SHERICE","SHARIKA","ROSSIE","ROSENA","RORY","RIMA","RIA","RHEBA","RENNA","PETER","NATALYA","NANCEE","MELODI","MEDA","MAXIMA","MATHA","MARKETTA","MARICRUZ","MARCELENE","MALVINA","LUBA","LOUETTA","LEIDA","LECIA","LAURAN","LASHAWNA","LAINE","KHADIJAH","KATERINE","KASI","KALLIE","JULIETTA","JESUSITA","JESTINE","JESSIA","JEREMY","JEFFIE","JANYCE","ISADORA","GEORGIANNE","FIDELIA","EVITA","EURA","EULAH","ESTEFANA","ELSY","ELIZABET","ELADIA","DODIE","DION","DIA","DENISSE","DELORAS","DELILA","DAYSI","DAKOTA","CURTIS","CRYSTLE","CONCHA","COLBY","CLARETTA","CHU","CHRISTIA","CHARLSIE","CHARLENA","CARYLON","BETTYANN","ASLEY","ASHLEA","AMIRA","AI","AGUEDA","AGNUS","YUETTE","VINITA","VICTORINA","TYNISHA","TREENA","TOCCARA","TISH","THOMASENA","TEGAN","SOILA","SHILOH","SHENNA","SHARMAINE","SHANTAE","SHANDI","SEPTEMBER","SARAN","SARAI","SANA","SAMUEL","SALLEY","ROSETTE","ROLANDE","REGINE","OTELIA","OSCAR","OLEVIA","NICHOLLE","NECOLE","NAIDA","MYRTA","MYESHA","MITSUE","MINTA","MERTIE","MARGY","MAHALIA","MADALENE","LOVE","LOURA","LOREAN","LEWIS","LESHA","LEONIDA","LENITA","LAVONE","LASHELL","LASHANDRA","LAMONICA","KIMBRA","KATHERINA","KARRY","KANESHA","JULIO","JONG","JENEVA","JAQUELYN","HWA","GILMA","GHISLAINE","GERTRUDIS","FRANSISCA","FERMINA","ETTIE","ETSUKO","ELLIS","ELLAN","ELIDIA","EDRA","DORETHEA","DOREATHA","DENYSE","DENNY","DEETTA","DAINE","CYRSTAL","CORRIN","CAYLA","CARLITA","CAMILA","BURMA","BULA","BUENA","BLAKE","BARABARA","AVRIL","AUSTIN","ALAINE","ZANA","WILHEMINA","WANETTA","VIRGIL","VI","VERONIKA","VERNON","VERLINE","VASILIKI","TONITA","TISA","TEOFILA","TAYNA","TAUNYA","TANDRA","TAKAKO","SUNNI","SUANNE","SIXTA","SHARELL","SEEMA","RUSSELL","ROSENDA","ROBENA","RAYMONDE","PEI","PAMILA","OZELL","NEIDA","NEELY","MISTIE","MICHA","MERISSA","MAURITA","MARYLN","MARYETTA","MARSHALL","MARCELL","MALENA","MAKEDA","MADDIE","LOVETTA","LOURIE","LORRINE","LORILEE","LESTER","LAURENA","LASHAY","LARRAINE","LAREE","LACRESHA","KRISTLE","KRISHNA","KEVA","KEIRA","KAROLE","JOIE","JINNY","JEANNETTA","JAMA","HEIDY","GILBERTE","GEMA","FAVIOLA","EVELYNN","ENDA","ELLI","ELLENA","DIVINA","DAGNY","COLLENE","CODI","CINDIE","CHASSIDY","CHASIDY","CATRICE","CATHERINA","CASSEY","CAROLL","CARLENA","CANDRA","CALISTA","BRYANNA","BRITTENY","BEULA","BARI","AUDRIE","AUDRIA","ARDELIA","ANNELLE","ANGILA","ALONA","ALLYN","DOUGLAS","ROGER","JONATHAN","RALPH","NICHOLAS","BENJAMIN","BRUCE","HARRY","WAYNE","STEVE","HOWARD","ERNEST","PHILLIP","TODD","CRAIG","ALAN","PHILIP","EARL","DANNY","BRYAN","STANLEY","LEONARD","NATHAN","MANUEL","RODNEY","MARVIN","VINCENT","JEFFERY","JEFF","CHAD","JACOB","ALFRED","BRADLEY","HERBERT","FREDERICK","EDWIN","DON","RICKY","RANDALL","BARRY","BERNARD","LEROY","MARCUS","THEODORE","CLIFFORD","MIGUEL","JIM","TOM","CALVIN","BILL","LLOYD","DEREK","WARREN","DARRELL","JEROME","FLOYD","ALVIN","TIM","GORDON","GREG","JORGE","DUSTIN","PEDRO","DERRICK","ZACHARY","HERMAN","GLEN","HECTOR","RICARDO","RICK","BRENT","RAMON","GILBERT","MARC","REGINALD","RUBEN","NATHANIEL","RAFAEL","EDGAR","MILTON","RAUL","BEN","CHESTER","DUANE","FRANKLIN","BRAD","RON","ROLAND","ARNOLD","HARVEY","JARED","ERIK","DARRYL","NEIL","JAVIER","FERNANDO","CLINTON","TED","MATHEW","TYRONE","DARREN","LANCE","KURT","ALLAN","NELSON","GUY","CLAYTON","HUGH","MAX","DWAYNE","DWIGHT","ARMANDO","FELIX","EVERETT","IAN","WALLACE","KEN","BOB","ALFREDO","ALBERTO","DAVE","IVAN","BYRON","ISAAC","MORRIS","CLIFTON","WILLARD","ROSS","ANDY","SALVADOR","KIRK","SERGIO","SETH","KENT","TERRANCE","EDUARDO","TERRENCE","ENRIQUE","WADE","STUART","FREDRICK","ARTURO","ALEJANDRO","NICK","LUTHER","WENDELL","JEREMIAH","JULIUS","OTIS","TREVOR","OLIVER","LUKE","HOMER","GERARD","DOUG","KENNY","HUBERT","LYLE","MATT","ALFONSO","ORLANDO","REX","CARLTON","ERNESTO","NEAL","PABLO","LORENZO","OMAR","WILBUR","GRANT","HORACE","RODERICK","ABRAHAM","WILLIS","RICKEY","ANDRES","CESAR","JOHNATHAN","MALCOLM","RUDOLPH","DAMON","KELVIN","PRESTON","ALTON","ARCHIE","MARCO","WM","PETE","RANDOLPH","GARRY","GEOFFREY","JONATHON","FELIPE","GERARDO","ED","DOMINIC","DELBERT","COLIN","GUILLERMO","EARNEST","LUCAS","BENNY","SPENCER","RODOLFO","MYRON","EDMUND","GARRETT","SALVATORE","CEDRIC","LOWELL","GREGG","SHERMAN","WILSON","SYLVESTER","ROOSEVELT","ISRAEL","JERMAINE","FORREST","WILBERT","LELAND","SIMON","CLARK","IRVING","BRYANT","OWEN","RUFUS","WOODROW","KRISTOPHER","MACK","LEVI","MARCOS","GUSTAVO","JAKE","LIONEL","GILBERTO","CLINT","NICOLAS","ISMAEL","ORVILLE","ERVIN","DEWEY","AL","WILFRED","JOSH","HUGO","IGNACIO","CALEB","TOMAS","SHELDON","ERICK","STEWART","DOYLE","DARREL","ROGELIO","TERENCE","SANTIAGO","ALONZO","ELIAS","BERT","ELBERT","RAMIRO","CONRAD","NOAH","GRADY","PHIL","CORNELIUS","LAMAR","ROLANDO","CLAY","PERCY","DEXTER","BRADFORD","DARIN","AMOS","MOSES","IRVIN","SAUL","ROMAN","RANDAL","TIMMY","DARRIN","WINSTON","BRENDAN","ABEL","DOMINICK","BOYD","EMILIO","ELIJAH","DOMINGO","EMMETT","MARLON","EMANUEL","JERALD","EDMOND","EMIL","DEWAYNE","WILL","OTTO","TEDDY","REYNALDO","BRET","JESS","TRENT","HUMBERTO","EMMANUEL","STEPHAN","VICENTE","LAMONT","GARLAND","MILES","EFRAIN","HEATH","RODGER","HARLEY","ETHAN","ELDON","ROCKY","PIERRE","JUNIOR","FREDDY","ELI","BRYCE","ANTOINE","STERLING","CHASE","GROVER","ELTON","CLEVELAND","DYLAN","CHUCK","DAMIAN","REUBEN","STAN","AUGUST","LEONARDO","JASPER","RUSSEL","ERWIN","BENITO","HANS","MONTE","BLAINE","ERNIE","CURT","QUENTIN","AGUSTIN","MURRAY","JAMAL","ADOLFO","HARRISON","TYSON","BURTON","BRADY","ELLIOTT","WILFREDO","BART","JARROD","VANCE","DENIS","DAMIEN","JOAQUIN","HARLAN","DESMOND","ELLIOT","DARWIN","GREGORIO","BUDDY","XAVIER","KERMIT","ROSCOE","ESTEBAN","ANTON","SOLOMON","SCOTTY","NORBERT","ELVIN","WILLIAMS","NOLAN","ROD","QUINTON","HAL","BRAIN","ROB","ELWOOD","KENDRICK","DARIUS","MOISES","FIDEL","THADDEUS","CLIFF","MARCEL","JACKSON","RAPHAEL","BRYON","ARMAND","ALVARO","JEFFRY","DANE","JOESPH","THURMAN","NED","RUSTY","MONTY","FABIAN","REGGIE","MASON","GRAHAM","ISAIAH","VAUGHN","GUS","LOYD","DIEGO","ADOLPH","NORRIS","MILLARD","ROCCO","GONZALO","DERICK","RODRIGO","WILEY","RIGOBERTO","ALPHONSO","TY","NOE","VERN","REED","JEFFERSON","ELVIS","BERNARDO","MAURICIO","HIRAM","DONOVAN","BASIL","RILEY","NICKOLAS","MAYNARD","SCOT","VINCE","QUINCY","EDDY","SEBASTIAN","FEDERICO","ULYSSES","HERIBERTO","DONNELL","COLE","DAVIS","GAVIN","EMERY","WARD","ROMEO","JAYSON","DANTE","CLEMENT","COY","MAXWELL","JARVIS","BRUNO","ISSAC","DUDLEY","BROCK","SANFORD","CARMELO","BARNEY","NESTOR","STEFAN","DONNY","ART","LINWOOD","BEAU","WELDON","GALEN","ISIDRO","TRUMAN","DELMAR","JOHNATHON","SILAS","FREDERIC","DICK","IRWIN","MERLIN","CHARLEY","MARCELINO","HARRIS","CARLO","TRENTON","KURTIS","HUNTER","AURELIO","WINFRED","VITO","COLLIN","DENVER","CARTER","LEONEL","EMORY","PASQUALE","MOHAMMAD","MARIANO","DANIAL","LANDON","DIRK","BRANDEN","ADAN","BUFORD","GERMAN","WILMER","EMERSON","ZACHERY","FLETCHER","JACQUES","ERROL","DALTON","MONROE","JOSUE","EDWARDO","BOOKER","WILFORD","SONNY","SHELTON","CARSON","THERON","RAYMUNDO","DAREN","HOUSTON","ROBBY","LINCOLN","GENARO","BENNETT","OCTAVIO","CORNELL","HUNG","ARRON","ANTONY","HERSCHEL","GIOVANNI","GARTH","CYRUS","CYRIL","RONNY","LON","FREEMAN","DUNCAN","KENNITH","CARMINE","ERICH","CHADWICK","WILBURN","RUSS","REID","MYLES","ANDERSON","MORTON","JONAS","FOREST","MITCHEL","MERVIN","ZANE","RICH","JAMEL","LAZARO","ALPHONSE","RANDELL","MAJOR","JARRETT","BROOKS","ABDUL","LUCIANO","SEYMOUR","EUGENIO","MOHAMMED","VALENTIN","CHANCE","ARNULFO","LUCIEN","FERDINAND","THAD","EZRA","ALDO","RUBIN","ROYAL","MITCH","EARLE","ABE","WYATT","MARQUIS","LANNY","KAREEM","JAMAR","BORIS","ISIAH","EMILE","ELMO","ARON","LEOPOLDO","EVERETTE","JOSEF","ELOY","RODRICK","REINALDO","LUCIO","JERROD","WESTON","HERSHEL","BARTON","PARKER","LEMUEL","BURT","JULES","GIL","ELISEO","AHMAD","NIGEL","EFREN","ANTWAN","ALDEN","MARGARITO","COLEMAN","DINO","OSVALDO","LES","DEANDRE","NORMAND","KIETH","TREY","NORBERTO","NAPOLEON","JEROLD","FRITZ","ROSENDO","MILFORD","CHRISTOPER","ALFONZO","LYMAN","JOSIAH","BRANT","WILTON","RICO","JAMAAL","DEWITT","BRENTON","OLIN","FOSTER","FAUSTINO","CLAUDIO","JUDSON","GINO","EDGARDO","ALEC","TANNER","JARRED","DONN","TAD","PRINCE","PORFIRIO","ODIS","LENARD","CHAUNCEY","TOD","MEL","MARCELO","KORY","AUGUSTUS","KEVEN","HILARIO","BUD","SAL","ORVAL","MAURO","ZACHARIAH","OLEN","ANIBAL","MILO","JED","DILLON","AMADO","NEWTON","LENNY","RICHIE","HORACIO","BRICE","MOHAMED","DELMER","DARIO","REYES","MAC","JONAH","JERROLD","ROBT","HANK","RUPERT","ROLLAND","KENTON","DAMION","ANTONE","WALDO","FREDRIC","BRADLY","KIP","BURL","WALKER","TYREE","JEFFEREY","AHMED","WILLY","STANFORD","OREN","NOBLE","MOSHE","MIKEL","ENOCH","BRENDON","QUINTIN","JAMISON","FLORENCIO","DARRICK","TOBIAS","HASSAN","GIUSEPPE","DEMARCUS","CLETUS","TYRELL","LYNDON","KEENAN","WERNER","GERALDO","COLUMBUS","CHET","BERTRAM","MARKUS","HUEY","HILTON","DWAIN","DONTE","TYRON","OMER","ISAIAS","HIPOLITO","FERMIN","ADALBERTO","BO","BARRETT","TEODORO","MCKINLEY","MAXIMO","GARFIELD","RALEIGH","LAWERENCE","ABRAM","RASHAD","KING","EMMITT","DARON","SAMUAL","MIQUEL","EUSEBIO","DOMENIC","DARRON","BUSTER","WILBER","RENATO","JC","HOYT","HAYWOOD","EZEKIEL","CHAS","FLORENTINO","ELROY","CLEMENTE","ARDEN","NEVILLE","EDISON","DESHAWN","NATHANIAL","JORDON","DANILO","CLAUD","SHERWOOD","RAYMON","RAYFORD","CRISTOBAL","AMBROSE","TITUS","HYMAN","FELTON","EZEQUIEL","ERASMO","STANTON","LONNY","LEN","IKE","MILAN","LINO","JAROD","HERB","ANDREAS","WALTON","RHETT","PALMER","DOUGLASS","CORDELL","OSWALDO","ELLSWORTH","VIRGILIO","TONEY","NATHANAEL","DEL","BENEDICT","MOSE","JOHNSON","ISREAL","GARRET","FAUSTO","ASA","ARLEN","ZACK","WARNER","MODESTO","FRANCESCO","MANUAL","GAYLORD","GASTON","FILIBERTO","DEANGELO","MICHALE","GRANVILLE","WES","MALIK","ZACKARY","TUAN","ELDRIDGE","CRISTOPHER","CORTEZ","ANTIONE","MALCOM","LONG","KOREY","JOSPEH","COLTON","WAYLON","VON","HOSEA","SHAD","SANTO","RUDOLF","ROLF","REY","RENALDO","MARCELLUS","LUCIUS","KRISTOFER","BOYCE","BENTON","HAYDEN","HARLAND","ARNOLDO","RUEBEN","LEANDRO","KRAIG","JERRELL","JEROMY","HOBERT","CEDRICK","ARLIE","WINFORD","WALLY","LUIGI","KENETH","JACINTO","GRAIG","FRANKLYN","EDMUNDO","SID","PORTER","LEIF","JERAMY","BUCK","WILLIAN","VINCENZO","SHON","LYNWOOD","JERE","HAI","ELDEN","DORSEY","DARELL","BRODERICK","ALONSO"]
	actuallist = inputlist + inputlist2 + inputlist3
	actuallist.sort()
	def letterval(char):
		return ord(char) - 64
	def wordval(word):
		val = 0
		for i in word:
			val += letterval(i)
		return val	
	ans = 0
	for i in actuallist:
		ans += (actuallist.index(i) + 1) * wordval(i)
	print(ans)
# problem22() = 871198282

def problem23():
	from itertools import combinations
	def divisors(num):
		divlist = []
		for i in range(1, num):
			if num % i == 0:
				divlist.append(i)
		return divlist
	anslist = []
	for i in range(1, 28123 + 1):
		if sum(divisors(i)) > i:
			anslist.append(i)
	sums = []
	for i in list(combinations(anslist, 2)):
		sums.append(sum(i))
	for i in anslist:
		sums.append(i * 2)
	sumset = list(set(sums))
	ans = 0
	for i in range(0, 28123 + 1):
		if sumset.count(i) == 0:
			ans += i
	print(ans)
# problem23() = 4179871

def problem24(string, place):
	from itertools import permutations
	anslist = [int(i) for i in [''.join(p) for p in permutations(string)]]
	anslist.sort()
	print(anslist[place - 1])
# problem24('1234567890', 1000000) = 2783915460

def problem25(digits):
	x = '1'
	y = '1'
	check = True
	count = 1
	while len(x) != digits or len(y) != digits:
		if check == True:
			x = str(int(x) + int(y))
			check = False
			count += 1
		else:
			y = str(int(x) + int(y))
			check = True
			count += 1
	print(count)
# problem25(1000) = 4782

def problem26(upperlimit):
	def indices(lst, element):
		result = []
		offset = -1
		while True:
			try:
				offset = lst.index(element, offset+1)
			except ValueError:
				return result
			result.append(offset)
	def repeatingdecimal(num):
		import math
		dividend = 10
		quotientlist = []
		dividendlist = [10]
		while True:
			if dividend % num == 0:
				return '0'
			if dividend < num:
				dividend = int(str(dividend) + '0')
				dividendlist.append(dividend)
			else:
				quotientlist.append(math.floor(dividend / num))
				dividend = dividend % num
				dividendlist.append(dividend)
				if dividendlist.count(dividend) == 2:
					x = indices(dividendlist, dividend)[0]
					y = indices(dividendlist, dividend)[1]
					return ''.join([str(i) for i in quotientlist[x:y]])
	ilist = []
	repeatlen = []
	for i in range(2, upperlimit + 1):
		ilist.append(i)
		repeatlen.append(len(repeatingdecimal(i)))
	print(ilist[repeatlen.index(max(repeatlen))])
# problem26(1000) = 983

def problem27():
	def check_prime(num):
		prime = True
		for i in range(2, int(num ** .5) + 1):
			if num % i == 0:
				prime = False
		return prime
	def quadratic(b, c):
		prime = 0
		while True:
			if (prime ** 2) + (b * prime) + c >= 0:
				if check_prime((prime ** 2) + (b * prime) + c) == True:
					prime += 1
				else:
					return prime
			else:
				return prime
	primelist = []
	pairlist = []
	for i in range(-999, 1000):
		for j in range(-1000, 1001):
			if quadratic(i, j) > 40:
				primelist.append(quadratic(i, j))
				pairlist.append([i, j])
	print(pairlist[primelist.index(max(primelist))][0] * pairlist[primelist.index(max(primelist))][1])
# problem27()	= -59231

def problem28(spiralmax):
	ans = 1
	spiral = 1
	add = 2
	number = 1
	while spiral != spiralmax:
		for i in range(0, 4):
			number += add
			ans += number
		add += 2
		spiral += 2
	print(ans)
# problem28(1001) = 669171001

def problem29(rangebase, rangepower):
	anslist = []
	for i in range(2, rangebase + 1):
		for j in range(2, rangepower + 1):
			anslist.append(str(i ** j))
	print(len(set(anslist)))
def problem29efficient(rangebase, rangepower):
	len(set(a**b for a in range(2, rangebase + 1) for b in range(2, rangepower + 1)))
# problem29(100, 100) = 9183

def problem30(power):
	ans = 0
	for i in range(2, 1000000):
		number = []
		number [:] = str(i)
		digitsum = 0
		for j in number:
			digitsum += int(j) ** power
		if digitsum == i:
			ans += i
	print(ans)
# problem30(5) = 443839

def problem31(target):
	ans = 0
	for i in range(target + 1, 0, -200):
		for j in range(i, 0, -100):
			for k in range(j, 0, -50):
				for l in range(k, 0, -20):
					for m in range(l, 0, -10):
						for n in range(m, 0, -5):
							for o in range(n, 0, -2):
								ans += 1
	print(ans)
# problem31(200) = 73682

def problem32(string):
	from itertools import permutations
	x = [''.join(p) for p in permutations(string)]
	anslist = []
	for i in x:
		if int(i[0:2]) * int(i[2:5]) == int(i[5:9]) or int(i[0:1]) * int(i[1:5]) == int(i[5:9]):
			anslist.append(int(i[5:9]))
	print(sum(set(anslist)))
# problem32('123456789') = 45228

def problem33():
	from fractions import Fraction
	nontrivials = []
	for i in range(10, 100):
		for j in range(10, 100):
			w = x = y = z = 1
			if j > i and i % 10 != 0 and j % 10 != 0:
				if int(str(i)[1]) == int(str(j)[1]):
				       w = int(str(i)[0]) / int(str(j)[0])
				elif int(str(i)[0]) == int(str(j)[1]):
				       x = int(str(i)[1]) / int(str(j)[0])
				elif int(str(i)[1]) == int(str(j)[0]):
				       y = int(str(i)[0]) / int(str(j)[1])
				elif int(str(i)[0]) == int(str(j)[0]):
				       z = int(str(i)[1]) / int(str(j)[1])
				if i / j == w or i / j == x or i / j == y or i / j == z:
					nontrivials.append([i, j])
	numer = 1
	denom = 1
	for i in nontrivials:
		numer *= i[0]
		denom *= i[1]
	print(Fraction(numer, denom))
# problem33() = 1/100

def problem34():
	import math
	anslist= []
	for i in range(3, 100000):
		number = []
		number [:] = str(i)
		factsum = 0
		for j in number:
			factsum += math.factorial(int(j))
		if factsum == i:
			anslist.append(i)
	print(sum(anslist))
# problem34() = 40730

def problem35(upperlimit):
	count = 2
	def check_prime(num):
		prime = True
		for i in range(2, round(num ** .5) + 1):
			if num % i == 0:
				prime = False
		return prime
	for x in range(6, upperlimit + 1, 6):
		y = x + 1
		z = x - 1
		ynumlist = []
		ychecklist = []
		znumlist = []
		zchecklist = []
		for i in range(0, len(str(y))):
			ynumlist.append(str(y)[i:] + str(y)[0:i])
		for j in ynumlist:
			if check_prime(int(j)) == True:
				ychecklist.append(j)
		if set(ynumlist) == set(ychecklist):
			count += 1
		for i in range(0, len(str(z))):
			znumlist.append(str(z)[i:] + str(z)[0:i])
		for j in znumlist:
			if check_prime(int(j)) == True:
				zchecklist.append(j)
		if set(znumlist) == set(zchecklist):
			count += 1
	print(count)
# problem35(1000000) = 55

def problem36(upperlimit):
	def palincheck(num):
		return str(num) == str(num)[::-1]
	ans = 0
	for i in range(1, upperlimit + 1):
		if palincheck(i) == True and palincheck(bin(i)[2:]) == True:
			ans += i
	print(ans)
# problem36(1000000) = 872187

def problem37(upperlimit):
	def check_prime(num):
		prime = True
		for i in range(2, round(num ** .5) + 1):
			if num % i == 0:
				prime = False
		if num == 1:
			prime = False
		return prime
	ans = 0
	for x in range(10, 1000000):
		xlist = []
		checklist = []
		if check_prime(x) == True:
			for i in range(0, len(str(x))):
				xlist.append(str(x)[0: i])
				xlist.append(str(x)[i:])
			for i in xlist:
				if i == '':
					xlist.remove(i)
			for i in xlist:
				if check_prime(int(i)) == True:
					checklist.append(i)
			if set(checklist) == set(xlist):
				ans += x
	print(ans)
# problem37(1000000) = 748317

def problem38(maxrange):
	def concatprod(num):
		count = 1
		maxlist = []
		while len(maxlist) < 9:
			maxlist.extend(list(str(num * count)))
			count += 1
		return ''.join(maxlist)
	anslist = []
	for i in range(1, maxrange + 1):
		if len(concatprod(i)) == 9:
			testlist = [int(j) for j in list(concatprod(i))]
			testlist.sort()
			if ''.join([str(integer) for integer in testlist]) == '123456789':
				anslist.append(int(concatprod(i)))
	print(max(anslist))
# problem38(10000) = 932718654

def problem39(num):
	import math
	order = []
	for i in range(1, num + 1):
		for j in range(1, num + 1):
			x = i*i + j*j
			y = int(math.sqrt(x))
			if y*y == x and y <= num:
				if i <= j:
					order.append(i + j + y)
	for i in order:
		print(i)
# probelm39() = 840

def problem40():
	anslist = []
	for i in range(1, 200000):
		anslist.extend(list(str(i)))
	print(int(anslist[1-1]) * int(anslist[10-1]) * int(anslist[100-1]) * int(anslist[1000-1]) * int(anslist[10000-1]) * int(anslist[100000-1]) * int(anslist[1000000-1]))
# problem40() = 210

def problem41(string):
	def check_prime(num):
		prime = True
		for i in range(2, round(num ** .5) + 1):
			if num % i == 0:
				prime = False
		return prime
	x = [''.join(p) for p in permutations('1234567')]
	anslist = []
	if check_prime(int(i)) == True:
		anslist.append(int(i))
	print(max(anslist))
# problem41('1234567') = 7652413

def problem42():
	inputlist = ["A","ABILITY","ABLE","ABOUT","ABOVE","ABSENCE","ABSOLUTELY","ACADEMIC","ACCEPT","ACCESS","ACCIDENT","ACCOMPANY","ACCORDING","ACCOUNT","ACHIEVE","ACHIEVEMENT","ACID","ACQUIRE","ACROSS","ACT","ACTION","ACTIVE","ACTIVITY","ACTUAL","ACTUALLY","ADD","ADDITION","ADDITIONAL","ADDRESS","ADMINISTRATION","ADMIT","ADOPT","ADULT","ADVANCE","ADVANTAGE","ADVICE","ADVISE","AFFAIR","AFFECT","AFFORD","AFRAID","AFTER","AFTERNOON","AFTERWARDS","AGAIN","AGAINST","AGE","AGENCY","AGENT","AGO","AGREE","AGREEMENT","AHEAD","AID","AIM","AIR","AIRCRAFT","ALL","ALLOW","ALMOST","ALONE","ALONG","ALREADY","ALRIGHT","ALSO","ALTERNATIVE","ALTHOUGH","ALWAYS","AMONG","AMONGST","AMOUNT","AN","ANALYSIS","ANCIENT","AND","ANIMAL","ANNOUNCE","ANNUAL","ANOTHER","ANSWER","ANY","ANYBODY","ANYONE","ANYTHING","ANYWAY","APART","APPARENT","APPARENTLY","APPEAL","APPEAR","APPEARANCE","APPLICATION","APPLY","APPOINT","APPOINTMENT","APPROACH","APPROPRIATE","APPROVE","AREA","ARGUE","ARGUMENT","ARISE","ARM","ARMY","AROUND","ARRANGE","ARRANGEMENT","ARRIVE","ART","ARTICLE","ARTIST","AS","ASK","ASPECT","ASSEMBLY","ASSESS","ASSESSMENT","ASSET","ASSOCIATE","ASSOCIATION","ASSUME","ASSUMPTION","AT","ATMOSPHERE","ATTACH","ATTACK","ATTEMPT","ATTEND","ATTENTION","ATTITUDE","ATTRACT","ATTRACTIVE","AUDIENCE","AUTHOR","AUTHORITY","AVAILABLE","AVERAGE","AVOID","AWARD","AWARE","AWAY","AYE","BABY","BACK","BACKGROUND","BAD","BAG","BALANCE","BALL","BAND","BANK","BAR","BASE","BASIC","BASIS","BATTLE","BE","BEAR","BEAT","BEAUTIFUL","BECAUSE","BECOME","BED","BEDROOM","BEFORE","BEGIN","BEGINNING","BEHAVIOUR","BEHIND","BELIEF","BELIEVE","BELONG","BELOW","BENEATH","BENEFIT","BESIDE","BEST","BETTER","BETWEEN","BEYOND","BIG","BILL","BIND","BIRD","BIRTH","BIT","BLACK","BLOCK","BLOOD","BLOODY","BLOW","BLUE","BOARD","BOAT","BODY","BONE","BOOK","BORDER","BOTH","BOTTLE","BOTTOM","BOX","BOY","BRAIN","BRANCH","BREAK","BREATH","BRIDGE","BRIEF","BRIGHT","BRING","BROAD","BROTHER","BUDGET","BUILD","BUILDING","BURN","BUS","BUSINESS","BUSY","BUT","BUY","BY","CABINET","CALL","CAMPAIGN","CAN","CANDIDATE","CAPABLE","CAPACITY","CAPITAL","CAR","CARD","CARE","CAREER","CAREFUL","CAREFULLY","CARRY","CASE","CASH","CAT","CATCH","CATEGORY","CAUSE","CELL","CENTRAL","CENTRE","CENTURY","CERTAIN","CERTAINLY","CHAIN","CHAIR","CHAIRMAN","CHALLENGE","CHANCE","CHANGE","CHANNEL","CHAPTER","CHARACTER","CHARACTERISTIC","CHARGE","CHEAP","CHECK","CHEMICAL","CHIEF","CHILD","CHOICE","CHOOSE","CHURCH","CIRCLE","CIRCUMSTANCE","CITIZEN","CITY","CIVIL","CLAIM","CLASS","CLEAN","CLEAR","CLEARLY","CLIENT","CLIMB","CLOSE","CLOSELY","CLOTHES","CLUB","COAL","CODE","COFFEE","COLD","COLLEAGUE","COLLECT","COLLECTION","COLLEGE","COLOUR","COMBINATION","COMBINE","COME","COMMENT","COMMERCIAL","COMMISSION","COMMIT","COMMITMENT","COMMITTEE","COMMON","COMMUNICATION","COMMUNITY","COMPANY","COMPARE","COMPARISON","COMPETITION","COMPLETE","COMPLETELY","COMPLEX","COMPONENT","COMPUTER","CONCENTRATE","CONCENTRATION","CONCEPT","CONCERN","CONCERNED","CONCLUDE","CONCLUSION","CONDITION","CONDUCT","CONFERENCE","CONFIDENCE","CONFIRM","CONFLICT","CONGRESS","CONNECT","CONNECTION","CONSEQUENCE","CONSERVATIVE","CONSIDER","CONSIDERABLE","CONSIDERATION","CONSIST","CONSTANT","CONSTRUCTION","CONSUMER","CONTACT","CONTAIN","CONTENT","CONTEXT","CONTINUE","CONTRACT","CONTRAST","CONTRIBUTE","CONTRIBUTION","CONTROL","CONVENTION","CONVERSATION","COPY","CORNER","CORPORATE","CORRECT","COS","COST","COULD","COUNCIL","COUNT","COUNTRY","COUNTY","COUPLE","COURSE","COURT","COVER","CREATE","CREATION","CREDIT","CRIME","CRIMINAL","CRISIS","CRITERION","CRITICAL","CRITICISM","CROSS","CROWD","CRY","CULTURAL","CULTURE","CUP","CURRENT","CURRENTLY","CURRICULUM","CUSTOMER","CUT","DAMAGE","DANGER","DANGEROUS","DARK","DATA","DATE","DAUGHTER","DAY","DEAD","DEAL","DEATH","DEBATE","DEBT","DECADE","DECIDE","DECISION","DECLARE","DEEP","DEFENCE","DEFENDANT","DEFINE","DEFINITION","DEGREE","DELIVER","DEMAND","DEMOCRATIC","DEMONSTRATE","DENY","DEPARTMENT","DEPEND","DEPUTY","DERIVE","DESCRIBE","DESCRIPTION","DESIGN","DESIRE","DESK","DESPITE","DESTROY","DETAIL","DETAILED","DETERMINE","DEVELOP","DEVELOPMENT","DEVICE","DIE","DIFFERENCE","DIFFERENT","DIFFICULT","DIFFICULTY","DINNER","DIRECT","DIRECTION","DIRECTLY","DIRECTOR","DISAPPEAR","DISCIPLINE","DISCOVER","DISCUSS","DISCUSSION","DISEASE","DISPLAY","DISTANCE","DISTINCTION","DISTRIBUTION","DISTRICT","DIVIDE","DIVISION","DO","DOCTOR","DOCUMENT","DOG","DOMESTIC","DOOR","DOUBLE","DOUBT","DOWN","DRAW","DRAWING","DREAM","DRESS","DRINK","DRIVE","DRIVER","DROP","DRUG","DRY","DUE","DURING","DUTY","EACH","EAR","EARLY","EARN","EARTH","EASILY","EAST","EASY","EAT","ECONOMIC","ECONOMY","EDGE","EDITOR","EDUCATION","EDUCATIONAL","EFFECT","EFFECTIVE","EFFECTIVELY","EFFORT","EGG","EITHER","ELDERLY","ELECTION","ELEMENT","ELSE","ELSEWHERE","EMERGE","EMPHASIS","EMPLOY","EMPLOYEE","EMPLOYER","EMPLOYMENT","EMPTY","ENABLE","ENCOURAGE","END","ENEMY","ENERGY","ENGINE","ENGINEERING","ENJOY","ENOUGH","ENSURE","ENTER","ENTERPRISE","ENTIRE","ENTIRELY","ENTITLE","ENTRY","ENVIRONMENT","ENVIRONMENTAL","EQUAL","EQUALLY","EQUIPMENT","ERROR","ESCAPE","ESPECIALLY","ESSENTIAL","ESTABLISH","ESTABLISHMENT","ESTATE","ESTIMATE","EVEN","EVENING","EVENT","EVENTUALLY","EVER","EVERY","EVERYBODY","EVERYONE","EVERYTHING","EVIDENCE","EXACTLY","EXAMINATION","EXAMINE","EXAMPLE","EXCELLENT","EXCEPT","EXCHANGE","EXECUTIVE","EXERCISE","EXHIBITION","EXIST","EXISTENCE","EXISTING","EXPECT","EXPECTATION","EXPENDITURE","EXPENSE","EXPENSIVE","EXPERIENCE","EXPERIMENT","EXPERT","EXPLAIN","EXPLANATION","EXPLORE","EXPRESS","EXPRESSION","EXTEND","EXTENT","EXTERNAL","EXTRA","EXTREMELY","EYE","FACE","FACILITY","FACT","FACTOR","FACTORY","FAIL","FAILURE","FAIR","FAIRLY","FAITH","FALL","FAMILIAR","FAMILY","FAMOUS","FAR","FARM","FARMER","FASHION","FAST","FATHER","FAVOUR","FEAR","FEATURE","FEE","FEEL","FEELING","FEMALE","FEW","FIELD","FIGHT","FIGURE","FILE","FILL","FILM","FINAL","FINALLY","FINANCE","FINANCIAL","FIND","FINDING","FINE","FINGER","FINISH","FIRE","FIRM","FIRST","FISH","FIT","FIX","FLAT","FLIGHT","FLOOR","FLOW","FLOWER","FLY","FOCUS","FOLLOW","FOLLOWING","FOOD","FOOT","FOOTBALL","FOR","FORCE","FOREIGN","FOREST","FORGET","FORM","FORMAL","FORMER","FORWARD","FOUNDATION","FREE","FREEDOM","FREQUENTLY","FRESH","FRIEND","FROM","FRONT","FRUIT","FUEL","FULL","FULLY","FUNCTION","FUND","FUNNY","FURTHER","FUTURE","GAIN","GAME","GARDEN","GAS","GATE","GATHER","GENERAL","GENERALLY","GENERATE","GENERATION","GENTLEMAN","GET","GIRL","GIVE","GLASS","GO","GOAL","GOD","GOLD","GOOD","GOVERNMENT","GRANT","GREAT","GREEN","GREY","GROUND","GROUP","GROW","GROWING","GROWTH","GUEST","GUIDE","GUN","HAIR","HALF","HALL","HAND","HANDLE","HANG","HAPPEN","HAPPY","HARD","HARDLY","HATE","HAVE","HE","HEAD","HEALTH","HEAR","HEART","HEAT","HEAVY","HELL","HELP","HENCE","HER","HERE","HERSELF","HIDE","HIGH","HIGHLY","HILL","HIM","HIMSELF","HIS","HISTORICAL","HISTORY","HIT","HOLD","HOLE","HOLIDAY","HOME","HOPE","HORSE","HOSPITAL","HOT","HOTEL","HOUR","HOUSE","HOUSEHOLD","HOUSING","HOW","HOWEVER","HUGE","HUMAN","HURT","HUSBAND","I","IDEA","IDENTIFY","IF","IGNORE","ILLUSTRATE","IMAGE","IMAGINE","IMMEDIATE","IMMEDIATELY","IMPACT","IMPLICATION","IMPLY","IMPORTANCE","IMPORTANT","IMPOSE","IMPOSSIBLE","IMPRESSION","IMPROVE","IMPROVEMENT","IN","INCIDENT","INCLUDE","INCLUDING","INCOME","INCREASE","INCREASED","INCREASINGLY","INDEED","INDEPENDENT","INDEX","INDICATE","INDIVIDUAL","INDUSTRIAL","INDUSTRY","INFLUENCE","INFORM","INFORMATION","INITIAL","INITIATIVE","INJURY","INSIDE","INSIST","INSTANCE","INSTEAD","INSTITUTE","INSTITUTION","INSTRUCTION","INSTRUMENT","INSURANCE","INTEND","INTENTION","INTEREST","INTERESTED","INTERESTING","INTERNAL","INTERNATIONAL","INTERPRETATION","INTERVIEW","INTO","INTRODUCE","INTRODUCTION","INVESTIGATE","INVESTIGATION","INVESTMENT","INVITE","INVOLVE","IRON","IS","ISLAND","ISSUE","IT","ITEM","ITS","ITSELF","JOB","JOIN","JOINT","JOURNEY","JUDGE","JUMP","JUST","JUSTICE","KEEP","KEY","KID","KILL","KIND","KING","KITCHEN","KNEE","KNOW","KNOWLEDGE","LABOUR","LACK","LADY","LAND","LANGUAGE","LARGE","LARGELY","LAST","LATE","LATER","LATTER","LAUGH","LAUNCH","LAW","LAWYER","LAY","LEAD","LEADER","LEADERSHIP","LEADING","LEAF","LEAGUE","LEAN","LEARN","LEAST","LEAVE","LEFT","LEG","LEGAL","LEGISLATION","LENGTH","LESS","LET","LETTER","LEVEL","LIABILITY","LIBERAL","LIBRARY","LIE","LIFE","LIFT","LIGHT","LIKE","LIKELY","LIMIT","LIMITED","LINE","LINK","LIP","LIST","LISTEN","LITERATURE","LITTLE","LIVE","LIVING","LOAN","LOCAL","LOCATION","LONG","LOOK","LORD","LOSE","LOSS","LOT","LOVE","LOVELY","LOW","LUNCH","MACHINE","MAGAZINE","MAIN","MAINLY","MAINTAIN","MAJOR","MAJORITY","MAKE","MALE","MAN","MANAGE","MANAGEMENT","MANAGER","MANNER","MANY","MAP","MARK","MARKET","MARRIAGE","MARRIED","MARRY","MASS","MASTER","MATCH","MATERIAL","MATTER","MAY","MAYBE","ME","MEAL","MEAN","MEANING","MEANS","MEANWHILE","MEASURE","MECHANISM","MEDIA","MEDICAL","MEET","MEETING","MEMBER","MEMBERSHIP","MEMORY","MENTAL","MENTION","MERELY","MESSAGE","METAL","METHOD","MIDDLE","MIGHT","MILE","MILITARY","MILK","MIND","MINE","MINISTER","MINISTRY","MINUTE","MISS","MISTAKE","MODEL","MODERN","MODULE","MOMENT","MONEY","MONTH","MORE","MORNING","MOST","MOTHER","MOTION","MOTOR","MOUNTAIN","MOUTH","MOVE","MOVEMENT","MUCH","MURDER","MUSEUM","MUSIC","MUST","MY","MYSELF","NAME","NARROW","NATION","NATIONAL","NATURAL","NATURE","NEAR","NEARLY","NECESSARILY","NECESSARY","NECK","NEED","NEGOTIATION","NEIGHBOUR","NEITHER","NETWORK","NEVER","NEVERTHELESS","NEW","NEWS","NEWSPAPER","NEXT","NICE","NIGHT","NO","NOBODY","NOD","NOISE","NONE","NOR","NORMAL","NORMALLY","NORTH","NORTHERN","NOSE","NOT","NOTE","NOTHING","NOTICE","NOTION","NOW","NUCLEAR","NUMBER","NURSE","OBJECT","OBJECTIVE","OBSERVATION","OBSERVE","OBTAIN","OBVIOUS","OBVIOUSLY","OCCASION","OCCUR","ODD","OF","OFF","OFFENCE","OFFER","OFFICE","OFFICER","OFFICIAL","OFTEN","OIL","OKAY","OLD","ON","ONCE","ONE","ONLY","ONTO","OPEN","OPERATE","OPERATION","OPINION","OPPORTUNITY","OPPOSITION","OPTION","OR","ORDER","ORDINARY","ORGANISATION","ORGANISE","ORGANIZATION","ORIGIN","ORIGINAL","OTHER","OTHERWISE","OUGHT","OUR","OURSELVES","OUT","OUTCOME","OUTPUT","OUTSIDE","OVER","OVERALL","OWN","OWNER","PACKAGE","PAGE","PAIN","PAINT","PAINTING","PAIR","PANEL","PAPER","PARENT","PARK","PARLIAMENT","PART","PARTICULAR","PARTICULARLY","PARTLY","PARTNER","PARTY","PASS","PASSAGE","PAST","PATH","PATIENT","PATTERN","PAY","PAYMENT","PEACE","PENSION","PEOPLE","PER","PERCENT","PERFECT","PERFORM","PERFORMANCE","PERHAPS","PERIOD","PERMANENT","PERSON","PERSONAL","PERSUADE","PHASE","PHONE","PHOTOGRAPH","PHYSICAL","PICK","PICTURE","PIECE","PLACE","PLAN","PLANNING","PLANT","PLASTIC","PLATE","PLAY","PLAYER","PLEASE","PLEASURE","PLENTY","PLUS","POCKET","POINT","POLICE","POLICY","POLITICAL","POLITICS","POOL","POOR","POPULAR","POPULATION","POSITION","POSITIVE","POSSIBILITY","POSSIBLE","POSSIBLY","POST","POTENTIAL","POUND","POWER","POWERFUL","PRACTICAL","PRACTICE","PREFER","PREPARE","PRESENCE","PRESENT","PRESIDENT","PRESS","PRESSURE","PRETTY","PREVENT","PREVIOUS","PREVIOUSLY","PRICE","PRIMARY","PRIME","PRINCIPLE","PRIORITY","PRISON","PRISONER","PRIVATE","PROBABLY","PROBLEM","PROCEDURE","PROCESS","PRODUCE","PRODUCT","PRODUCTION","PROFESSIONAL","PROFIT","PROGRAM","PROGRAMME","PROGRESS","PROJECT","PROMISE","PROMOTE","PROPER","PROPERLY","PROPERTY","PROPORTION","PROPOSE","PROPOSAL","PROSPECT","PROTECT","PROTECTION","PROVE","PROVIDE","PROVIDED","PROVISION","PUB","PUBLIC","PUBLICATION","PUBLISH","PULL","PUPIL","PURPOSE","PUSH","PUT","QUALITY","QUARTER","QUESTION","QUICK","QUICKLY","QUIET","QUITE","RACE","RADIO","RAILWAY","RAIN","RAISE","RANGE","RAPIDLY","RARE","RATE","RATHER","REACH","REACTION","READ","READER","READING","READY","REAL","REALISE","REALITY","REALIZE","REALLY","REASON","REASONABLE","RECALL","RECEIVE","RECENT","RECENTLY","RECOGNISE","RECOGNITION","RECOGNIZE","RECOMMEND","RECORD","RECOVER","RED","REDUCE","REDUCTION","REFER","REFERENCE","REFLECT","REFORM","REFUSE","REGARD","REGION","REGIONAL","REGULAR","REGULATION","REJECT","RELATE","RELATION","RELATIONSHIP","RELATIVE","RELATIVELY","RELEASE","RELEVANT","RELIEF","RELIGION","RELIGIOUS","RELY","REMAIN","REMEMBER","REMIND","REMOVE","REPEAT","REPLACE","REPLY","REPORT","REPRESENT","REPRESENTATION","REPRESENTATIVE","REQUEST","REQUIRE","REQUIREMENT","RESEARCH","RESOURCE","RESPECT","RESPOND","RESPONSE","RESPONSIBILITY","RESPONSIBLE","REST","RESTAURANT","RESULT","RETAIN","RETURN","REVEAL","REVENUE","REVIEW","REVOLUTION","RICH","RIDE","RIGHT","RING","RISE","RISK","RIVER","ROAD","ROCK","ROLE","ROLL","ROOF","ROOM","ROUND","ROUTE","ROW","ROYAL","RULE","RUN","RURAL","SAFE","SAFETY","SALE","SAME","SAMPLE","SATISFY","SAVE","SAY","SCALE","SCENE","SCHEME","SCHOOL","SCIENCE","SCIENTIFIC","SCIENTIST","SCORE","SCREEN","SEA","SEARCH","SEASON","SEAT","SECOND","SECONDARY","SECRETARY","SECTION","SECTOR","SECURE","SECURITY","SEE","SEEK","SEEM","SELECT","SELECTION","SELL","SEND","SENIOR","SENSE","SENTENCE","SEPARATE","SEQUENCE","SERIES","SERIOUS","SERIOUSLY","SERVANT","SERVE","SERVICE","SESSION","SET","SETTLE","SETTLEMENT","SEVERAL","SEVERE","SEX","SEXUAL","SHAKE","SHALL","SHAPE","SHARE","SHE","SHEET","SHIP","SHOE","SHOOT","SHOP","SHORT","SHOT","SHOULD","SHOULDER","SHOUT","SHOW","SHUT","SIDE","SIGHT","SIGN","SIGNAL","SIGNIFICANCE","SIGNIFICANT","SILENCE","SIMILAR","SIMPLE","SIMPLY","SINCE","SING","SINGLE","SIR","SISTER","SIT","SITE","SITUATION","SIZE","SKILL","SKIN","SKY","SLEEP","SLIGHTLY","SLIP","SLOW","SLOWLY","SMALL","SMILE","SO","SOCIAL","SOCIETY","SOFT","SOFTWARE","SOIL","SOLDIER","SOLICITOR","SOLUTION","SOME","SOMEBODY","SOMEONE","SOMETHING","SOMETIMES","SOMEWHAT","SOMEWHERE","SON","SONG","SOON","SORRY","SORT","SOUND","SOURCE","SOUTH","SOUTHERN","SPACE","SPEAK","SPEAKER","SPECIAL","SPECIES","SPECIFIC","SPEECH","SPEED","SPEND","SPIRIT","SPORT","SPOT","SPREAD","SPRING","STAFF","STAGE","STAND","STANDARD","STAR","START","STATE","STATEMENT","STATION","STATUS","STAY","STEAL","STEP","STICK","STILL","STOCK","STONE","STOP","STORE","STORY","STRAIGHT","STRANGE","STRATEGY","STREET","STRENGTH","STRIKE","STRONG","STRONGLY","STRUCTURE","STUDENT","STUDIO","STUDY","STUFF","STYLE","SUBJECT","SUBSTANTIAL","SUCCEED","SUCCESS","SUCCESSFUL","SUCH","SUDDENLY","SUFFER","SUFFICIENT","SUGGEST","SUGGESTION","SUITABLE","SUM","SUMMER","SUN","SUPPLY","SUPPORT","SUPPOSE","SURE","SURELY","SURFACE","SURPRISE","SURROUND","SURVEY","SURVIVE","SWITCH","SYSTEM","TABLE","TAKE","TALK","TALL","TAPE","TARGET","TASK","TAX","TEA","TEACH","TEACHER","TEACHING","TEAM","TEAR","TECHNICAL","TECHNIQUE","TECHNOLOGY","TELEPHONE","TELEVISION","TELL","TEMPERATURE","TEND","TERM","TERMS","TERRIBLE","TEST","TEXT","THAN","THANK","THANKS","THAT","THE","THEATRE","THEIR","THEM","THEME","THEMSELVES","THEN","THEORY","THERE","THEREFORE","THESE","THEY","THIN","THING","THINK","THIS","THOSE","THOUGH","THOUGHT","THREAT","THREATEN","THROUGH","THROUGHOUT","THROW","THUS","TICKET","TIME","TINY","TITLE","TO","TODAY","TOGETHER","TOMORROW","TONE","TONIGHT","TOO","TOOL","TOOTH","TOP","TOTAL","TOTALLY","TOUCH","TOUR","TOWARDS","TOWN","TRACK","TRADE","TRADITION","TRADITIONAL","TRAFFIC","TRAIN","TRAINING","TRANSFER","TRANSPORT","TRAVEL","TREAT","TREATMENT","TREATY","TREE","TREND","TRIAL","TRIP","TROOP","TROUBLE","TRUE","TRUST","TRUTH","TRY","TURN","TWICE","TYPE","TYPICAL","UNABLE","UNDER","UNDERSTAND","UNDERSTANDING","UNDERTAKE","UNEMPLOYMENT","UNFORTUNATELY","UNION","UNIT","UNITED","UNIVERSITY","UNLESS","UNLIKELY","UNTIL","UP","UPON","UPPER","URBAN","US","USE","USED","USEFUL","USER","USUAL","USUALLY","VALUE","VARIATION","VARIETY","VARIOUS","VARY","VAST","VEHICLE","VERSION","VERY","VIA","VICTIM","VICTORY","VIDEO","VIEW","VILLAGE","VIOLENCE","VISION","VISIT","VISITOR","VITAL","VOICE","VOLUME","VOTE","WAGE","WAIT","WALK","WALL","WANT","WAR","WARM","WARN","WASH","WATCH","WATER","WAVE","WAY","WE","WEAK","WEAPON","WEAR","WEATHER","WEEK","WEEKEND","WEIGHT","WELCOME","WELFARE","WELL","WEST","WESTERN","WHAT","WHATEVER","WHEN","WHERE","WHEREAS","WHETHER","WHICH","WHILE","WHILST","WHITE","WHO","WHOLE","WHOM","WHOSE","WHY","WIDE","WIDELY","WIFE","WILD","WILL","WIN","WIND","WINDOW","WINE","WING","WINNER","WINTER","WISH","WITH","WITHDRAW","WITHIN","WITHOUT","WOMAN","WONDER","WONDERFUL","WOOD","WORD","WORK","WORKER","WORKING","WORKS","WORLD","WORRY","WORTH","WOULD","WRITE","WRITER","WRITING","WRONG","YARD","YEAH","YEAR","YES","YESTERDAY","YET","YOU","YOUNG","YOUR","YOURSELF","YOUTH"]
	triangulars = []
	for i in range(1, 100):
		triangulars.append(int(i * (i + 1) * .5))
	def letterval(char):
		return ord(char) - 64
	def wordval(word):
		val = 0
		for i in word:
			val += letterval(i)
		return val	
	ans = 0
	for i in inputlist:
		if triangulars.count(wordval(i)) == 1:
			ans += 1
	print(ans)
# problem42() = 162

def problem43():
	x = [''.join(p) for p in permutations('1234567890')]
	ans = 0
	for i in x:
		if i[0] != 0:
			if int(i[1:4]) % 2 == 0 and int(i[2:5]) % 3 == 0 and int(i[3:6]) % 5 == 0 and int(i[4:7]) % 7 == 0 and int(i[5:8]) % 11 == 0 and int(i[6:9]) % 13 == 0 and int(i[7:10]) % 17 == 0:
				ans += int(i)
	print(ans)
# problem43() = 16695334890

def problem44():
	def checkpent(num):
		return (((((num * 24)+ 1) ** .5) + 1) / 6) == int(((((num * 24)+ 1) ** .5) + 1) / 6)
	count = 1
	brk = False
	while True:
		check = (count * ((count * 3) - 1)) / 2
		for i in range(1, count):
			ipent = (i * ((i * 3) - 1)) / 2
			if checkpent(check - ipent) == True and checkpent(check + ipent) == True:
				print(int(check - ipent))
				brk = True
				break
		if brk == True:
			break
		count += 1
# problem44() = 5482660

def problem45():
	def checktri(num):
		return (((((8 * num) + 1) ** .5) - 1) / 2) == int(((((8 * num) + 1) ** .5) - 1) / 2)
	def checkpent(num):
		return (((((num * 24)+ 1) ** .5) + 1) / 6) == int(((((num * 24)+ 1) ** .5) + 1) / 6)
	def checkhex(num):
		return (((((8 * num) + 1) ** .5) + 1) / 4) == int(((((8 * num) + 1) ** .5) + 1) / 4)
	count = 0
	num = 2
	while count < 2:
		trinum = (num * (num + 1)) / 2
		if checktri(trinum) == True and checkpent(trinum) == True and checkhex(trinum) == True:
			count += 1
		num += 1
	print(int(trinum))
# problem45() = 1533776805

def problem46():
	def check_prime(num):
		prime = True
		for i in range(2, round(num ** .5)):
			if num % i == 0:
				prime = False
		return prime
	check = True
	count = 3
	while check == True:
		if check_prime(count) == False:
			answerslist = [2, 3]
			six = 1
			ans = True
			while answerslist[-2] < count:
				if 6 * six + 1 < count:
					if check_prime((6 * six) - 1) == True:
						answerslist.append((6 * six) - 1)
					if check_prime((6 * six) + 1) == True:
						answerslist.append((6 * six) + 1)
					six += 1
				else:
					break
			reverse = answerslist[::-1]
			for i in reverse:
				if (((count - i) / 2) ** .5) == int(((count - i) / 2) ** .5):
					ans = False
					break
			if ans == True:
				print(count)
				check = False
		count += 2
# problem46() = 5777

def problem47():
	def prime_factorization(num):
		def factorization(num):
			primelist = []
			for i in range(2, int(num / 2) + 1):
				if num % i == 0:
					primelist.append(i)
					primelist.append(int(num / i))
					break
			primelist.sort()
			return primelist
		def check_prime(num):
			prime = True
			for i in range(2, num):
				if num % i == 0:
					prime = False
			return prime
		answerlist = factorization(num)
		for i in answerlist:
			if check_prime(i) == False:
				answerlist.extend(factorization(i))
				answerlist.remove(i)
		if answerlist == []:
			answerlist = [num]
		return answerlist
	check = True
	answer = 100000
	while check == True:
		if len(set(prime_factorization(answer))) == 4 and len(set(prime_factorization(answer + 1))) == 4 and len(set(prime_factorization(answer + 2))) == 4 and len(set(prime_factorization(answer + 3))) == 4:
			print(answer)
			check = False
		else:
			answer += 1
# problem47() = 134043

def problem48(upperlimit, numberoflastdigits):
	x = '0'
	for i in range(1, upperlimit + 1):
		x = str(int(x) + i ** i)
	print(x[(-1 * numberoflastdigits):])
def problem48efficient():
	print(str(sum([i**i for i in range(1, 1001)]))[-10:])
# problem48(1000, 10) = 9110846700

def problem49():
	from itertools import combinations
	from itertools import permutations
	def check_prime(num):
		prime = True
		for i in range(2, int(num / 2)):
			if num % i == 0:
				prime = False
		return prime
	anslist = []
	while len(set(anslist)) != 2:
		for y in range(1000, 10000):
			if check_prime(y) == True:
				for i in list(combinations(list(set([''.join(p) for p in permutations(str(y))])), 3)):
					j = [int(x) for x in i]
					j.sort()
					if check_prime(j[0]) == True and check_prime(j[1]) == True and check_prime(j[2]) == True:
						if j[1] - j[0] == j[2] - j[1]:
							if len(str(j[0]) + str(j[1]) + str(j[2])) == 12:
								anslist.append(str(j[0]) + str(j[1]) + str(j[2]))
	for i in set(anslist):
		print(i)
# problem49() = 296962999629

def problem50(maxrange):
	def check_prime(num):
		prime = True
		for i in range(2, round(num ** .5) + 1):
			if num % i == 0:
				prime = False
		return prime
	def primelist(number):
		answerslist = [2, 3]
		six = 1
		while answerslist[-2] < number:
			if 6 * six + 1 < number:
				if check_prime((6 * six) - 1) == True:
					answerslist.append((6 * six) - 1)
				if check_prime((6 * six) + 1) == True:
					answerslist.append((6 * six) + 1)
				six += 1
			else:
				break
		return answerslist
	y = primelist(maxrange / 2)
	primes = []
	counts = []
	for i in y:
		add = i
		count = 1
		primes.append(i)
		counts.append(count)
		x = y.index(i)
		for j in y[x + 1:]:
			add += j
			count += 1
			if add < maxrange:
				if check_prime(add) == True:
					primes[-1] = add
					counts[-1] = count
	print([max(counts), primes[counts.index(max(counts))]])
# problem50(1000000) = [543, 997651]

def problem52():
	def order(num):
		strlist = list(str(num))
		numlist = [int(i) for i in strlist]
		numlist.sort()
		strlist = [str(i) for i in numlist]
		return int(''.join(strlist))
	x = 1
	while True:
		if order(x) == order(x * 2) and order(x) == order(x * 3) and order(x) == order(x * 4) and order(x) == order(x * 5) and order(x) == order(x * 6):
			print(x)
			break
		else:
			x += 1
# problem52() = 142857

def problem53(rangeofn, greaterthan):
	import math
	def nCr(n,r):
		return math.factorial(n) / (math.factorial(r) * math.factorial(n-r))
	ans = 0
	for i in range(2, rangeofn + 1):
		for j in range(2, i - 1):
			if nCr(i, j) > greaterthan:
				ans += 1
	print(ans)
# problem53(100, 1000000) = 4075

def problem54():
	pokertxt = open('EulerNet/problem54.txt').read().strip()
	pokerlist = [i.split(' ') for i in pokertxt.split('\n')]
	def cardval(string):
		try:
			return int(string)
		except:
			if string == 'T':
				return 10
			elif string == 'J':
				return 11
			elif string == 'Q':
				return 12
			elif string == 'K':
				return 13
			elif string == 'A':
				return 14
	def pokerwin(tencardlist):
		player1 = sorted([cardval(i[0]) for i in tencardlist[0:5]])
		player1suit = [i[1] for i in tencardlist[0:5]]
		player2 = sorted([cardval(i[0]) for i in tencardlist[5:10]])
		player2suit = [i[1] for i in tencardlist[5:10]]
		# Royal Flush
		if player1 == [10, 11, 12, 13, 14] and player1suit.count(player1suit[0]) == 5:
			return 1
		elif player2 == [10, 11, 12, 13, 14] and player2suit.count(player2suit[0]) == 5:
			return 2
		# Straight Flush
		min1 = min(player1)
		min2 = min(player2)
		if player1.count(min1) == 1 and player1.count(str(int(min1) + 1)) == 1 and player1.count(str(int(min1) + 2)) == 1 and player1.count(str(int(min1) + 3)) == 1 and player1.count(str(int(min1) + 4)) == 1 and player1suit.count(player1suit[0]) == 5:
			if player2.count(min2) == 1 and player2.count(str(int(min2) + 1)) == 1 and player2.count(str(int(min2) + 2)) == 1 and player2.count(str(int(min2) + 3)) == 1 and player2.count(str(int(min2) + 4)) == 1 and player2suit.count(player2suit[0]) == 5:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
			else:
				return 1
		elif player2.count(min2) == 1 and player2.count(str(int(min2) + 1)) == 1 and player2.count(str(int(min2) + 2)) == 1 and player2.count(str(int(min2) + 3)) == 1 and player2.count(str(int(min2) + 4)) == 1 and player2suit.count(player2suit[0]) == 5:
			return 2
		# Four of a Kind
		if player1.count(max(player1, key = player1.count)) == 4:
			if player2.count(max(player2, key = player2.count)) == 4:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
				else:
					if min(player1) > min(player2):
						return 1
					elif min(player1) < min(player2):
						return 2
			else:
				return 1
		elif player2.count(max(player2, key = player2.count)) == 4:
			return 2
		# Full House
		if player1.count(max(player1, key = player1.count)) == 3 and player1.count(min(player1, key = player1.count)) == 2:
			if player2.count(max(player2, key = player2.count)) == 3 and player2.count(min(player2, key = player2.count)) == 2:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
				else:
					if min(player1) > min(player2):
						return 1
					elif min(player1) < min(player2):
						return 2
			else:
				return 1
		elif player2.count(max(player2, key = player2.count)) == 3 and player2.count(min(player2, key = player2.count)) == 2:
			return 2
		# Flush
		if player1suit.count(player1suit[0]) == 5:
			if player2suit.count(player2suit[0]) == 5:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
				else:
					if player1[-1] > player2[-1]:
						return 1
					elif player1[-1] < player2[-1]:
						return 2
					else:
						if player1[-2] > player2[-2]:
							return 1
						elif player1[-2] < player2[-2]:
							return 2
						else:
							if player1[-3] > player2[-3]:
								return 1
							elif player1[-3] < player2[-3]:
								return 2
							else:
								if player1[-4] > player2[-4]:
									return 1
								elif player1[-4] < player2[-4]:
									return 2
								else:
									if min(player1) > min(player2):
										return 1
									elif min(player1) < min(player2):
										return 2
			else:
				return 1
		elif player2suit.count(player2suit[0]) == 5:
			return 2
		# Straight
		if player1.count(min1) == 1 and player1.count(min1 + 1) == 1 and player1.count(min1 + 2) == 1 and player1.count(min1 + 3) == 1 and player1.count(min1 + 4) == 1:
			if player2.count(min2) == 1 and player2.count(min2 + 1) == 1 and player2.count(min2 + 2) == 1 and player2.count(min2 + 3) == 1 and player2.count(min2 + 4) == 1:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
			else:
				return 1
		elif player2.count(min2) == 1 and player2.count(min2 + 1) == 1 and player2.count(min2 + 2) == 1 and player2.count(min2 + 3) == 1 and player2.count(min2 + 4) == 1:
			return 2
		# Three of a Kind
		if player1.count(max(player1, key = player1.count)) == 3:
			if player2.count(max(player2, key = player2.count)) == 3:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
				else:
					if player1[-1] > player2[-1]:
						return 1
					elif player1[-1] < player2[-1]:
						return 2
					else:
						if player1[-2] > player2[-2]:
							return 1
						elif player1[-2] < player2[-2]:
							return 2
						else:
							if player1[-3] > player2[-3]:
								return 1
							elif player1[-3] < player2[-3]:
								return 2
							else:
								if player1[-4] > player2[-4]:
									return 1
								elif player1[-4] < player2[-4]:
									return 2
								else:
									if min(player1) > min(player2):
										return 1
									elif min(player1) < min(player2):
										return 2
			else:
				return 1
		elif player2.count(max(player2, key = player2.count)) == 3:
			return 2
		# Two Pairs
		pairs1 = []
		notpairs1 = 0
		pairs2 = []
		notpairs = 0
		for i in player1:
			if player1.count(i) == 2:
				pairs1.append(i)
			else:
				notpairs1 = i
		for i in player2:
			if player2.count(i) == 2:
				pairs2.append(i)
			else:
				notpairs2 = i
		pairs1.sort()
		pairs2.sort()
		if len(set(pairs1)) == 2:
			if len(set(pairs2)) == 2:
				if max(pairs1, key = pairs1.count) > max(pairs2, key = pairs2.count):
					return 1
				elif max(pairs1, key = pairs1.count) < max(pairs2, key = pairs2.count):
					return 2
				else:
					if min(pairs1, key = pairs1.count) > min(pairs2, key = pairs2.count):
						return 1
					elif min(pairs1, key = pairs1.count) < min(pairs2, key = pairs2.count):
						return 2
					else:
						if notpairs1 > notpairs2:
							return 1
						else:
							return 2
			else:
				return 1
		elif len(set(pairs2)) == 2:
			return 2
		# One Pair
		if player1.count(max(player1, key = player1.count)) == 2:
			if player2.count(max(player2, key = player2.count)) == 2:
				if max(player1, key = player1.count) > max(player2, key = player2.count):
					return 1
				elif max(player1, key = player1.count) < max(player2, key = player2.count):
					return 2
				else:
					if player1[-1] > player2[-1]:
						return 1
					elif player1[-1] < player2[-1]:
						return 2
					else:
						if player1[-2] > player2[-2]:
							return 1
						elif player1[-2] < player2[-2]:
							return 2
						else:
							if player1[-3] > player2[-3]:
								return 1
							elif player1[-3] < player2[-3]:
								return 2
							else:
								if player1[-4] > player2[-4]:
									return 1
								elif player1[-4] < player2[-4]:
									return 2
								else:
									if min(player1) > min(player2):
										return 1
									elif min(player1) < min(player2):
										return 2
			else:
				return 1
		elif player2.count(max(player2, key = player2.count)) == 2:
			return 2
		# High Card
		if max(player1) > max(player2):
			return 1
		elif max(player1) < max(player2):
			return 2
		else:
			if player1[-2] > player2[-2]:
				return 1
			elif player1[-2] < player2[-2]:
				return 2
			else:
				if player1[-3] > player2[-3]:
					return 1
				elif player1[-3] < player2[-3]:
					return 2
				else:
					if player1[-4] > player2[-4]:
						return 1
					elif player1[-4] < player2[-4]:
						return 2
					else:
						if min(player1) > min(player2):
							return 1
						elif min(player1) < min(player2):
							return 2
	ans = 0
	for i in pokerlist:
		if pokerwin(i) == 1:
			ans += 1
	print(ans)
# problem54() = 376

def problem55():
	def lychrel(num):
		iteration = 0
		reverse = num
		while iteration <= 50:
			palin = int(str(reverse)) + int(str(reverse)[::-1])
			if str(palin) == str(palin)[::-1]:
				return False
			reverse = palin
			iteration += 1
		else:
			return True
	print(len([i for i in range(10000 + 1) if lychrel(i) == True]))
# problem55() = 249

def problem56():
	powers = []
	for i in range(1, 101):
		for j in range(1, 101):
			powers.append(sum([int(x) for x in list(str(i ** j))]))
	print(max(powers))
# problem56() = 972

def problem57():
	def infinitefrac(repeat):
		n = 1
		d = 2
		for i in range(repeat):
			x = (2 * d) + n
			n = d
			d = x
		return [n + d, d]
	ans = 0
	for i in range(1,1000):
		if len(str(infinitefrac(i)[0])) > len(str(infinitefrac(i)[1])):
			ans += 1
	print(ans)
# problem57() = 153

def problem58(minpercent):
	def check_prime(num):
		prime = True
		for i in range(2, int(num ** .5) + 1):
			if num % i == 0:
				prime = False
		return prime
	spiral = 2
	diags = 1
	primes = 0
	while True:
		diags += spiral
		if check_prime(diags) == True:
			primes += 1
		diags += spiral
		if check_prime(diags) == True:
			primes += 1
		diags += spiral
		if check_prime(diags) == True:
			primes += 1
		diags += spiral
		spiral += 2
		if primes / ((((spiral - 2) / 2) * 4) + 1) < minpercent:
			print(spiral - 1)
			break
# problem58(.1) = 26241

def problem59():
	asciitxt = open('EulerNet/problem59.txt').read().strip()
	asciilist = [int(i) for i in asciitxt.split(',')]
	list1 = []
	list2 = []
	list3 = []
	ind = 0
	while ind < len(asciilist):
		for i in [list1, list2, list3]:
			i.append(asciilist[ind])
			ind += 1
	key = chr(max(list1, key = list1.count) ^ ord(' ')) + chr(max(list2, key = list2.count) ^ ord(' ')) + chr(max(list3, key = list3.count) ^ ord(' '))
	def decrypt(asciilist, key):
		string = ''
		ind = 0
		while len(string) < len(asciilist):
			for i in range(0, 3):
				string += chr(asciilist[ind] ^ ord(key[i]))
				ind += 1
		return string
	decryptedstring = decrypt(asciilist, key)
	ans = 0
	for i in decryptedstring:
		ans += ord(i)
	print(ans)
# problem59() = 129448

def problem62(numcubeperms):
	from itertools import permutations
	cube = 1
	cubes = []
	while True:
		x = sorted(list(str(cube ** 3)))
		cubes.append(x)
		if cubes.count(x) == numcubeperms:
			print((cubes.index(x) + 1) ** 3)
			break
		cube += 1
# problem62(5) = 127035954683

def problem63():
	ans = 0
	for i in range(1, 10):
		power = 1
		while True:
			if len(str(i ** power)) == power:
				ans += 1
				power += 1
			else:
				break
	print(ans)
# problem63() = 49

def problem64(maxrange):
	def radcontinuedfrac(radical):
		firstnum = []
		rad = radical**.5
		fraclist = [(rad - int(rad))**-1]
		while True:
			x = [str(i)[0:5] for i in fraclist]
			y = (fraclist[-1] - int(fraclist[-1]))**-1
			firstnum.append(int(fraclist[-1]))
			if x.count(str(y)[0:5]) == 0:
				fraclist.append(y)
			else:
				return len(firstnum)
	ans = 0
	for i in range(1, maxrange + 1):
		if i**.5 != int(i**.5) and radcontinuedfrac(i) % 2 == 1:
			ans += 1
	print(ans)
# problem64(10000)

def problem65(nthfrac):
	def infinitefrac(replist, startingnumber):
		rnge = len(replist)
		n = 1
		d = replist.pop(-1)
		for i in range(rnge - 1):
			x = (replist.pop(-1) * d) + n
			n = d
			d = x
		return [str(n + startingnumber * d), str(d)]
	repeatlist = []
	k = 2
	while len(repeatlist) < nthfrac - 1:
		for i in range(3):
			if i == 0 or i == 2:
				repeatlist.append(1)
			else:
				repeatlist.append(k)
				k += 2
	anslist = infinitefrac(repeatlist, 2)
	print(sum([int(i) for i in list(anslist[0])]))
# problem65(100) = 272

def problem67():
	x = [[59], [73, 41], [52, 40, 9], [26, 53, 6, 34], [10, 51, 87, 86, 81], [61, 95, 66, 57, 25, 68], [90, 81, 80, 38, 92, 67, 73], [30, 28, 51, 76, 81, 18, 75, 44], [84, 14, 95, 87, 62, 81, 17, 78, 58], [21, 46, 71, 58, 2, 79, 62, 39, 31, 9], [56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15], [78, 53, 4, 21, 84, 93, 32, 13, 97, 11, 37, 51], [45, 3, 81, 79, 5, 18, 78, 86, 13, 30, 63, 99, 95], [39, 87, 96, 28, 3, 38, 42, 17, 82, 87, 58, 7, 22, 57], [6, 17, 51, 17, 7, 93, 9, 7, 75, 97, 95, 78, 87, 8, 53], [67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28], [76, 40, 41, 4, 87, 16, 9, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87], [12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35], [70, 39, 6, 5, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86], [66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 5, 98, 3, 2, 60], [38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 2, 90, 45, 13, 31, 61, 83, 73, 47], [36, 10, 63, 96, 60, 49, 41, 5, 37, 42, 14, 58, 84, 93, 96, 17, 9, 43, 5, 43, 6, 59], [66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18], [54, 42, 5, 79, 30, 49, 99, 73, 46, 37, 50, 2, 45, 9, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45], [71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75, 9, 2], [33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 7, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 5], [92, 9, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 5, 57, 7, 54, 69, 21, 67, 43, 17, 63, 12], [24, 59, 6, 8, 98, 74, 66, 26, 61, 60, 13, 3, 9, 9, 24, 30, 71, 8, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34], [66, 82, 67, 4, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 4, 53, 22, 83, 41, 9, 74, 90], [48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17, 8, 19, 54, 89, 29, 73, 68, 42, 14, 8, 16, 70, 37], [37, 60, 69, 70, 72, 71, 9, 59, 13, 60, 38, 13, 57, 36, 9, 30, 43, 89, 30, 39, 15, 2, 44, 73, 5, 73, 26, 63, 56, 86, 12], [55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 3, 21, 27, 22, 19, 26, 82, 69, 54, 4, 13, 7, 85, 14, 1, 15, 70, 59, 89, 95, 10, 19], [4, 9, 31, 92, 91, 38, 92, 86, 98, 75, 21, 5, 64, 42, 62, 84, 36, 20, 73, 42, 21, 23, 22, 51, 51, 79, 25, 45, 85, 53, 3, 43, 22], [75, 63, 2, 49, 14, 12, 89, 14, 60, 78, 92, 16, 44, 82, 38, 30, 72, 11, 46, 52, 90, 27, 8, 65, 78, 3, 85, 41, 57, 79, 39, 52, 33, 48], [78, 27, 56, 56, 39, 13, 19, 43, 86, 72, 58, 95, 39, 7, 4, 34, 21, 98, 39, 15, 39, 84, 89, 69, 84, 46, 37, 57, 59, 35, 59, 50, 26, 15, 93], [42, 89, 36, 27, 78, 91, 24, 11, 17, 41, 5, 94, 7, 69, 51, 96, 3, 96, 47, 90, 90, 45, 91, 20, 50, 56, 10, 32, 36, 49, 4, 53, 85, 92, 25, 65], [52, 9, 61, 30, 61, 97, 66, 21, 96, 92, 98, 90, 6, 34, 96, 60, 32, 69, 68, 33, 75, 84, 18, 31, 71, 50, 84, 63, 3, 3, 19, 11, 28, 42, 75, 45, 45], [61, 31, 61, 68, 96, 34, 49, 39, 5, 71, 76, 59, 62, 67, 6, 47, 96, 99, 34, 21, 32, 47, 52, 7, 71, 60, 42, 72, 94, 56, 82, 83, 84, 40, 94, 87, 82, 46], [1, 20, 60, 14, 17, 38, 26, 78, 66, 81, 45, 95, 18, 51, 98, 81, 48, 16, 53, 88, 37, 52, 69, 95, 72, 93, 22, 34, 98, 20, 54, 27, 73, 61, 56, 63, 60, 34, 63], [93, 42, 94, 83, 47, 61, 27, 51, 79, 79, 45, 1, 44, 73, 31, 70, 83, 42, 88, 25, 53, 51, 30, 15, 65, 94, 80, 44, 61, 84, 12, 77, 2, 62, 2, 65, 94, 42, 14, 94], [32, 73, 9, 67, 68, 29, 74, 98, 10, 19, 85, 48, 38, 31, 85, 67, 53, 93, 93, 77, 47, 67, 39, 72, 94, 53, 18, 43, 77, 40, 78, 32, 29, 59, 24, 6, 2, 83, 50, 60, 66], [32, 1, 44, 30, 16, 51, 15, 81, 98, 15, 10, 62, 86, 79, 50, 62, 45, 60, 70, 38, 31, 85, 65, 61, 64, 6, 69, 84, 14, 22, 56, 43, 9, 48, 66, 69, 83, 91, 60, 40, 36, 61], [92, 48, 22, 99, 15, 95, 64, 43, 1, 16, 94, 2, 99, 19, 17, 69, 11, 58, 97, 56, 89, 31, 77, 45, 67, 96, 12, 73, 8, 20, 36, 47, 81, 44, 50, 64, 68, 85, 40, 81, 85, 52, 9], [91, 35, 92, 45, 32, 84, 62, 15, 19, 64, 21, 66, 6, 1, 52, 80, 62, 59, 12, 25, 88, 28, 91, 50, 40, 16, 22, 99, 92, 79, 87, 51, 21, 77, 74, 77, 7, 42, 38, 42, 74, 83, 2, 5], [46, 19, 77, 66, 24, 18, 5, 32, 2, 84, 31, 99, 92, 58, 96, 72, 91, 36, 62, 99, 55, 29, 53, 42, 12, 37, 26, 58, 89, 50, 66, 19, 82, 75, 12, 48, 24, 87, 91, 85, 2, 7, 3, 76, 86], [99, 98, 84, 93, 7, 17, 33, 61, 92, 20, 66, 60, 24, 66, 40, 30, 67, 5, 37, 29, 24, 96, 3, 27, 70, 62, 13, 4, 45, 47, 59, 88, 43, 20, 66, 15, 46, 92, 30, 4, 71, 66, 78, 70, 53, 99], [67, 60, 38, 6, 88, 4, 17, 72, 10, 99, 71, 7, 42, 25, 54, 5, 26, 64, 91, 50, 45, 71, 6, 30, 67, 48, 69, 82, 8, 56, 80, 67, 18, 46, 66, 63, 1, 20, 8, 80, 47, 7, 91, 16, 3, 79, 87], [18, 54, 78, 49, 80, 48, 77, 40, 68, 23, 60, 88, 58, 80, 33, 57, 11, 69, 55, 53, 64, 2, 94, 49, 60, 92, 16, 35, 81, 21, 82, 96, 25, 24, 96, 18, 2, 5, 49, 3, 50, 77, 6, 32, 84, 27, 18, 38], [68, 1, 50, 4, 3, 21, 42, 94, 53, 24, 89, 5, 92, 26, 52, 36, 68, 11, 85, 1, 4, 42, 2, 45, 15, 6, 50, 4, 53, 73, 25, 74, 81, 88, 98, 21, 67, 84, 79, 97, 99, 20, 95, 4, 40, 46, 2, 58, 87], [94, 10, 2, 78, 88, 52, 21, 3, 88, 60, 6, 53, 49, 71, 20, 91, 12, 65, 7, 49, 21, 22, 11, 41, 58, 99, 36, 16, 9, 48, 17, 24, 52, 36, 23, 15, 72, 16, 84, 56, 2, 99, 43, 76, 81, 71, 29, 39, 49, 17], [64, 39, 59, 84, 86, 16, 17, 66, 3, 9, 43, 6, 64, 18, 63, 29, 68, 6, 23, 7, 87, 14, 26, 35, 17, 12, 98, 41, 53, 64, 78, 18, 98, 27, 28, 84, 80, 67, 75, 62, 10, 11, 76, 90, 54, 10, 5, 54, 41, 39, 66], [43, 83, 18, 37, 32, 31, 52, 29, 95, 47, 8, 76, 35, 11, 4, 53, 35, 43, 34, 10, 52, 57, 12, 36, 20, 39, 40, 55, 78, 44, 7, 31, 38, 26, 8, 15, 56, 88, 86, 1, 52, 62, 10, 24, 32, 5, 60, 65, 53, 28, 57, 99], [3, 50, 3, 52, 7, 73, 49, 92, 66, 80, 1, 46, 8, 67, 25, 36, 73, 93, 7, 42, 25, 53, 13, 96, 76, 83, 87, 90, 54, 89, 78, 22, 78, 91, 73, 51, 69, 9, 79, 94, 83, 53, 9, 40, 69, 62, 10, 79, 49, 47, 3, 81, 30], [71, 54, 73, 33, 51, 76, 59, 54, 79, 37, 56, 45, 84, 17, 62, 21, 98, 69, 41, 95, 65, 24, 39, 37, 62, 3, 24, 48, 54, 64, 46, 82, 71, 78, 33, 67, 9, 16, 96, 68, 52, 74, 79, 68, 32, 21, 13, 78, 96, 60, 9, 69, 20, 36], [73, 26, 21, 44, 46, 38, 17, 83, 65, 98, 7, 23, 52, 46, 61, 97, 33, 13, 60, 31, 70, 15, 36, 77, 31, 58, 56, 93, 75, 68, 21, 36, 69, 53, 90, 75, 25, 82, 39, 50, 65, 94, 29, 30, 11, 33, 11, 13, 96, 2, 56, 47, 7, 49, 2], [76, 46, 73, 30, 10, 20, 60, 70, 14, 56, 34, 26, 37, 39, 48, 24, 55, 76, 84, 91, 39, 86, 95, 61, 50, 14, 53, 93, 64, 67, 37, 31, 10, 84, 42, 70, 48, 20, 10, 72, 60, 61, 84, 79, 69, 65, 99, 73, 89, 25, 85, 48, 92, 56, 97, 16], [3, 14, 80, 27, 22, 30, 44, 27, 67, 75, 79, 32, 51, 54, 81, 29, 65, 14, 19, 4, 13, 82, 4, 91, 43, 40, 12, 52, 29, 99, 7, 76, 60, 25, 1, 7, 61, 71, 37, 92, 40, 47, 99, 66, 57, 1, 43, 44, 22, 40, 53, 53, 9, 69, 26, 81, 7], [49, 80, 56, 90, 93, 87, 47, 13, 75, 28, 87, 23, 72, 79, 32, 18, 27, 20, 28, 10, 37, 59, 21, 18, 70, 4, 79, 96, 3, 31, 45, 71, 81, 6, 14, 18, 17, 5, 31, 50, 92, 79, 23, 47, 9, 39, 47, 91, 43, 54, 69, 47, 42, 95, 62, 46, 32, 85], [37, 18, 62, 85, 87, 28, 64, 5, 77, 51, 47, 26, 30, 65, 5, 70, 65, 75, 59, 80, 42, 52, 25, 20, 44, 10, 92, 17, 71, 95, 52, 14, 77, 13, 24, 55, 11, 65, 26, 91, 1, 30, 63, 15, 49, 48, 41, 17, 67, 47, 3, 68, 20, 90, 98, 32, 4, 40, 68], [90, 51, 58, 60, 6, 55, 23, 68, 5, 19, 76, 94, 82, 36, 96, 43, 38, 90, 87, 28, 33, 83, 5, 17, 70, 83, 96, 93, 6, 4, 78, 47, 80, 6, 23, 84, 75, 23, 87, 72, 99, 14, 50, 98, 92, 38, 90, 64, 61, 58, 76, 94, 36, 66, 87, 80, 51, 35, 61, 38], [57, 95, 64, 6, 53, 36, 82, 51, 40, 33, 47, 14, 7, 98, 78, 65, 39, 58, 53, 6, 50, 53, 4, 69, 40, 68, 36, 69, 75, 78, 75, 60, 3, 32, 39, 24, 74, 47, 26, 90, 13, 40, 44, 71, 90, 76, 51, 24, 36, 50, 25, 45, 70, 80, 61, 80, 61, 43, 90, 64, 11], [18, 29, 86, 56, 68, 42, 79, 10, 42, 44, 30, 12, 96, 18, 23, 18, 52, 59, 2, 99, 67, 46, 60, 86, 43, 38, 55, 17, 44, 93, 42, 21, 55, 14, 47, 34, 55, 16, 49, 24, 23, 29, 96, 51, 55, 10, 46, 53, 27, 92, 27, 46, 63, 57, 30, 65, 43, 27, 21, 20, 24, 83], [81, 72, 93, 19, 69, 52, 48, 1, 13, 83, 92, 69, 20, 48, 69, 59, 20, 62, 5, 42, 28, 89, 90, 99, 32, 72, 84, 17, 8, 87, 36, 3, 60, 31, 36, 36, 81, 26, 97, 36, 48, 54, 56, 56, 27, 16, 91, 8, 23, 11, 87, 99, 33, 47, 2, 14, 44, 73, 70, 99, 43, 35, 33], [90, 56, 61, 86, 56, 12, 70, 59, 63, 32, 1, 15, 81, 47, 71, 76, 95, 32, 65, 80, 54, 70, 34, 51, 40, 45, 33, 4, 64, 55, 78, 68, 88, 47, 31, 47, 68, 87, 3, 84, 23, 44, 89, 72, 35, 8, 31, 76, 63, 26, 90, 85, 96, 67, 65, 91, 19, 14, 17, 86, 4, 71, 32, 95], [37, 13, 4, 22, 64, 37, 37, 28, 56, 62, 86, 33, 7, 37, 10, 44, 52, 82, 52, 6, 19, 52, 57, 75, 90, 26, 91, 24, 6, 21, 14, 67, 76, 30, 46, 14, 35, 89, 89, 41, 3, 64, 56, 97, 87, 63, 22, 34, 3, 79, 17, 45, 11, 53, 25, 56, 96, 61, 23, 18, 63, 31, 37, 37, 47], [77, 23, 26, 70, 72, 76, 77, 4, 28, 64, 71, 69, 14, 85, 96, 54, 95, 48, 6, 62, 99, 83, 86, 77, 97, 75, 71, 66, 30, 19, 57, 90, 33, 1, 60, 61, 14, 12, 90, 99, 32, 77, 56, 41, 18, 14, 87, 49, 10, 14, 90, 64, 18, 50, 21, 74, 14, 16, 88, 5, 45, 73, 82, 47, 74, 44], [22, 97, 41, 13, 34, 31, 54, 61, 56, 94, 3, 24, 59, 27, 98, 77, 4, 9, 37, 40, 12, 26, 87, 9, 71, 70, 7, 18, 64, 57, 80, 21, 12, 71, 83, 94, 60, 39, 73, 79, 73, 19, 97, 32, 64, 29, 41, 7, 48, 84, 85, 67, 12, 74, 95, 20, 24, 52, 41, 67, 56, 61, 29, 93, 35, 72, 69], [72, 23, 63, 66, 1, 11, 7, 30, 52, 56, 95, 16, 65, 26, 83, 90, 50, 74, 60, 18, 16, 48, 43, 77, 37, 11, 99, 98, 30, 94, 91, 26, 62, 73, 45, 12, 87, 73, 47, 27, 1, 88, 66, 99, 21, 41, 95, 80, 2, 53, 23, 32, 61, 48, 32, 43, 43, 83, 14, 66, 95, 91, 19, 81, 80, 67, 25, 88], [8, 62, 32, 18, 92, 14, 83, 71, 37, 96, 11, 83, 39, 99, 5, 16, 23, 27, 10, 67, 2, 25, 44, 11, 55, 31, 46, 64, 41, 56, 44, 74, 26, 81, 51, 31, 45, 85, 87, 9, 81, 95, 22, 28, 76, 69, 46, 48, 64, 87, 67, 76, 27, 89, 31, 11, 74, 16, 62, 3, 60, 94, 42, 47, 9, 34, 94, 93, 72], [56, 18, 90, 18, 42, 17, 42, 32, 14, 86, 6, 53, 33, 95, 99, 35, 29, 15, 44, 20, 49, 59, 25, 54, 34, 59, 84, 21, 23, 54, 35, 90, 78, 16, 93, 13, 37, 88, 54, 19, 86, 67, 68, 55, 66, 84, 65, 42, 98, 37, 87, 56, 33, 28, 58, 38, 28, 38, 66, 27, 52, 21, 81, 15, 8, 22, 97, 32, 85, 27], [91, 53, 40, 28, 13, 34, 91, 25, 1, 63, 50, 37, 22, 49, 71, 58, 32, 28, 30, 18, 68, 94, 23, 83, 63, 62, 94, 76, 80, 41, 90, 22, 82, 52, 29, 12, 18, 56, 10, 8, 35, 14, 37, 57, 23, 65, 67, 40, 72, 39, 93, 39, 70, 89, 40, 34, 7, 46, 94, 22, 20, 5, 53, 64, 56, 30, 5, 56, 61, 88, 27], [23, 95, 11, 12, 37, 69, 68, 24, 66, 10, 87, 70, 43, 50, 75, 7, 62, 41, 83, 58, 95, 93, 89, 79, 45, 39, 2, 22, 5, 22, 95, 43, 62, 11, 68, 29, 17, 40, 26, 44, 25, 71, 87, 16, 70, 85, 19, 25, 59, 94, 90, 41, 41, 80, 61, 70, 55, 60, 84, 33, 95, 76, 42, 63, 15, 9, 3, 40, 38, 12, 3, 32], [9, 84, 56, 80, 61, 55, 85, 97, 16, 94, 82, 94, 98, 57, 84, 30, 84, 48, 93, 90, 71, 5, 95, 90, 73, 17, 30, 98, 40, 64, 65, 89, 7, 79, 9, 19, 56, 36, 42, 30, 23, 69, 73, 72, 7, 5, 27, 61, 24, 31, 43, 48, 71, 84, 21, 28, 26, 65, 65, 59, 65, 74, 77, 20, 10, 81, 61, 84, 95, 8, 52, 23, 70], [47, 81, 28, 9, 98, 51, 67, 64, 35, 51, 59, 36, 92, 82, 77, 65, 80, 24, 72, 53, 22, 7, 27, 10, 21, 28, 30, 22, 48, 82, 80, 48, 56, 20, 14, 43, 18, 25, 50, 95, 90, 31, 77, 8, 9, 48, 44, 80, 90, 22, 93, 45, 82, 17, 13, 96, 25, 26, 8, 73, 34, 99, 6, 49, 24, 6, 83, 51, 40, 14, 15, 10, 25, 1], [54, 25, 10, 81, 30, 64, 24, 74, 75, 80, 36, 75, 82, 60, 22, 69, 72, 91, 45, 67, 3, 62, 79, 54, 89, 74, 44, 83, 64, 96, 66, 73, 44, 30, 74, 50, 37, 5, 9, 97, 70, 1, 60, 46, 37, 91, 39, 75, 75, 18, 58, 52, 72, 78, 51, 81, 86, 52, 8, 97, 1, 46, 43, 66, 98, 62, 81, 18, 70, 93, 73, 8, 32, 46, 34], [96, 80, 82, 7, 59, 71, 92, 53, 19, 20, 88, 66, 3, 26, 26, 10, 24, 27, 50, 82, 94, 73, 63, 8, 51, 33, 22, 45, 19, 13, 58, 33, 90, 15, 22, 50, 36, 13, 55, 6, 35, 47, 82, 52, 33, 61, 36, 27, 28, 46, 98, 14, 73, 20, 73, 32, 16, 26, 80, 53, 47, 66, 76, 38, 94, 45, 2, 1, 22, 52, 47, 96, 64, 58, 52, 39], [88, 46, 23, 39, 74, 63, 81, 64, 20, 90, 33, 33, 76, 55, 58, 26, 10, 46, 42, 26, 74, 74, 12, 83, 32, 43, 9, 2, 73, 55, 86, 54, 85, 34, 28, 23, 29, 79, 91, 62, 47, 41, 82, 87, 99, 22, 48, 90, 20, 5, 96, 75, 95, 4, 43, 28, 81, 39, 81, 1, 28, 42, 78, 25, 39, 77, 90, 57, 58, 98, 17, 36, 73, 22, 63, 74, 51], [29, 39, 74, 94, 95, 78, 64, 24, 38, 86, 63, 87, 93, 6, 70, 92, 22, 16, 80, 64, 29, 52, 20, 27, 23, 50, 14, 13, 87, 15, 72, 96, 81, 22, 8, 49, 72, 30, 70, 24, 79, 31, 16, 64, 59, 21, 89, 34, 96, 91, 48, 76, 43, 53, 88, 1, 57, 80, 23, 81, 90, 79, 58, 1, 80, 87, 17, 99, 86, 90, 72, 63, 32, 69, 14, 28, 88, 69], [37, 17, 71, 95, 56, 93, 71, 35, 43, 45, 4, 98, 92, 94, 84, 96, 11, 30, 31, 27, 31, 60, 92, 3, 48, 5, 98, 91, 86, 94, 35, 90, 90, 8, 48, 19, 33, 28, 68, 37, 59, 26, 65, 96, 50, 68, 22, 7, 9, 49, 34, 31, 77, 49, 43, 6, 75, 17, 81, 87, 61, 79, 52, 26, 27, 72, 29, 50, 7, 98, 86, 1, 17, 10, 46, 64, 24, 18, 56], [51, 30, 25, 94, 88, 85, 79, 91, 40, 33, 63, 84, 49, 67, 98, 92, 15, 26, 75, 19, 82, 5, 18, 78, 65, 93, 61, 48, 91, 43, 59, 41, 70, 51, 22, 15, 92, 81, 67, 91, 46, 98, 11, 11, 65, 31, 66, 10, 98, 65, 83, 21, 5, 56, 5, 98, 73, 67, 46, 74, 69, 34, 8, 30, 5, 52, 7, 98, 32, 95, 30, 94, 65, 50, 24, 63, 28, 81, 99, 57], [19, 23, 61, 36, 9, 89, 71, 98, 65, 17, 30, 29, 89, 26, 79, 74, 94, 11, 44, 48, 97, 54, 81, 55, 39, 66, 69, 45, 28, 47, 13, 86, 15, 76, 74, 70, 84, 32, 36, 33, 79, 20, 78, 14, 41, 47, 89, 28, 81, 5, 99, 66, 81, 86, 38, 26, 6, 25, 13, 60, 54, 55, 23, 53, 27, 5, 89, 25, 23, 11, 13, 54, 59, 54, 56, 34, 16, 24, 53, 44, 6], [13, 40, 57, 72, 21, 15, 60, 8, 4, 19, 11, 98, 34, 45, 9, 97, 86, 71, 3, 15, 56, 19, 15, 44, 97, 31, 90, 4, 87, 87, 76, 8, 12, 30, 24, 62, 84, 28, 12, 85, 82, 53, 99, 52, 13, 94, 6, 65, 97, 86, 9, 50, 94, 68, 69, 74, 30, 67, 87, 94, 63, 7, 78, 27, 80, 36, 69, 41, 6, 92, 32, 78, 37, 82, 30, 5, 18, 87, 99, 72, 19, 99], [44, 20, 55, 77, 69, 91, 27, 31, 28, 81, 80, 27, 2, 7, 97, 23, 95, 98, 12, 25, 75, 29, 47, 71, 7, 47, 78, 39, 41, 59, 27, 76, 13, 15, 66, 61, 68, 35, 69, 86, 16, 53, 67, 63, 99, 85, 41, 56, 8, 28, 33, 40, 94, 76, 90, 85, 31, 70, 24, 65, 84, 65, 99, 82, 19, 25, 54, 37, 21, 46, 33, 2, 52, 99, 51, 33, 26, 4, 87, 2, 8, 18, 96], [54, 42, 61, 45, 91, 6, 64, 79, 80, 82, 32, 16, 83, 63, 42, 49, 19, 78, 65, 97, 40, 42, 14, 61, 49, 34, 4, 18, 25, 98, 59, 30, 82, 72, 26, 88, 54, 36, 21, 75, 3, 88, 99, 53, 46, 51, 55, 78, 22, 94, 34, 40, 68, 87, 84, 25, 30, 76, 25, 8, 92, 84, 42, 61, 40, 38, 9, 99, 40, 23, 29, 39, 46, 55, 10, 90, 35, 84, 56, 70, 63, 23, 91, 39]] 
	y = [[52, 92, 3, 71, 89, 7, 9, 37, 68, 66, 58, 20, 44, 92, 51, 56, 13, 71, 79, 99, 26, 37, 2, 6, 16, 67, 36, 52, 58, 16, 79, 73, 56, 60, 59, 27, 44, 77, 94, 82, 20, 50, 98, 33, 9, 87, 94, 37, 40, 83, 64, 83, 58, 85, 17, 76, 53, 2, 83, 52, 22, 27, 39, 20, 48, 92, 45, 21, 9, 42, 24, 23, 12, 37, 52, 28, 50, 78, 79, 20, 86, 62, 73, 20, 59], [54, 96, 80, 15, 91, 90, 99, 70, 10, 9, 58, 90, 93, 50, 81, 99, 54, 38, 36, 10, 30, 11, 35, 84, 16, 45, 82, 18, 11, 97, 36, 43, 96, 79, 97, 65, 40, 48, 23, 19, 17, 31, 64, 52, 65, 65, 37, 32, 65, 76, 99, 79, 34, 65, 79, 27, 55, 33, 3, 1, 33, 27, 61, 28, 66, 8, 4, 70, 49, 46, 48, 83, 1, 45, 19, 96, 13, 81, 14, 21, 31, 79, 93, 85, 50, 5], [92, 92, 48, 84, 59, 98, 31, 53, 23, 27, 15, 22, 79, 95, 24, 76, 5, 79, 16, 93, 97, 89, 38, 89, 42, 83, 2, 88, 94, 95, 82, 21, 1, 97, 48, 39, 31, 78, 9, 65, 50, 56, 97, 61, 1, 7, 65, 27, 21, 23, 14, 15, 80, 97, 44, 78, 49, 35, 33, 45, 81, 74, 34, 5, 31, 57, 9, 38, 94, 7, 69, 54, 69, 32, 65, 68, 46, 68, 78, 90, 24, 28, 49, 51, 45, 86, 35], [41, 63, 89, 76, 87, 31, 86, 9, 46, 14, 87, 82, 22, 29, 47, 16, 13, 10, 70, 72, 82, 95, 48, 64, 58, 43, 13, 75, 42, 69, 21, 12, 67, 13, 64, 85, 58, 23, 98, 9, 37, 76, 5, 22, 31, 12, 66, 50, 29, 99, 86, 72, 45, 25, 10, 28, 19, 6, 90, 43, 29, 31, 67, 79, 46, 25, 74, 14, 97, 35, 76, 37, 65, 46, 23, 82, 6, 22, 30, 76, 93, 66, 94, 17, 96, 13, 20, 72], [63, 40, 78, 8, 52, 9, 90, 41, 70, 28, 36, 14, 46, 44, 85, 96, 24, 52, 58, 15, 87, 37, 5, 98, 99, 39, 13, 61, 76, 38, 44, 99, 83, 74, 90, 22, 53, 80, 56, 98, 30, 51, 63, 39, 44, 30, 91, 91, 4, 22, 27, 73, 17, 35, 53, 18, 35, 45, 54, 56, 27, 78, 48, 13, 69, 36, 44, 38, 71, 25, 30, 56, 15, 22, 73, 43, 32, 69, 59, 25, 93, 83, 45, 11, 34, 94, 44, 39, 92], [12, 36, 56, 88, 13, 96, 16, 12, 55, 54, 11, 47, 19, 78, 17, 17, 68, 81, 77, 51, 42, 55, 99, 85, 66, 27, 81, 79, 93, 42, 65, 61, 69, 74, 14, 1, 18, 56, 12, 1, 58, 37, 91, 22, 42, 66, 83, 25, 19, 4, 96, 41, 25, 45, 18, 69, 96, 88, 36, 93, 10, 12, 98, 32, 44, 83, 83, 4, 72, 91, 4, 27, 73, 7, 34, 37, 71, 60, 59, 31, 1, 54, 54, 44, 96, 93, 83, 36, 4, 45], [30, 18, 22, 20, 42, 96, 65, 79, 17, 41, 55, 69, 94, 81, 29, 80, 91, 31, 85, 25, 47, 26, 43, 49, 2, 99, 34, 67, 99, 76, 16, 14, 15, 93, 8, 32, 99, 44, 61, 77, 67, 50, 43, 55, 87, 55, 53, 72, 17, 46, 62, 25, 50, 99, 73, 5, 93, 48, 17, 31, 70, 80, 59, 9, 44, 59, 45, 13, 74, 66, 58, 94, 87, 73, 16, 14, 85, 38, 74, 99, 64, 23, 79, 28, 71, 42, 20, 37, 82, 31, 23], [51, 96, 39, 65, 46, 71, 56, 13, 29, 68, 53, 86, 45, 33, 51, 49, 12, 91, 21, 21, 76, 85, 2, 17, 98, 15, 46, 12, 60, 21, 88, 30, 92, 83, 44, 59, 42, 50, 27, 88, 46, 86, 94, 73, 45, 54, 23, 24, 14, 10, 94, 21, 20, 34, 23, 51, 4, 83, 99, 75, 90, 63, 60, 16, 22, 33, 83, 70, 11, 32, 10, 50, 29, 30, 83, 46, 11, 5, 31, 17, 86, 42, 49, 1, 44, 63, 28, 60, 7, 78, 95, 40], [44, 61, 89, 59, 4, 49, 51, 27, 69, 71, 46, 76, 44, 4, 9, 34, 56, 39, 15, 6, 94, 91, 75, 90, 65, 27, 56, 23, 74, 6, 23, 33, 36, 69, 14, 39, 5, 34, 35, 57, 33, 22, 76, 46, 56, 10, 61, 65, 98, 9, 16, 69, 4, 62, 65, 18, 99, 76, 49, 18, 72, 66, 73, 83, 82, 40, 76, 31, 89, 91, 27, 88, 17, 35, 41, 35, 32, 51, 32, 67, 52, 68, 74, 85, 80, 57, 7, 11, 62, 66, 47, 22, 67], [65, 37, 19, 97, 26, 17, 16, 24, 24, 17, 50, 37, 64, 82, 24, 36, 32, 11, 68, 34, 69, 31, 32, 89, 79, 93, 96, 68, 49, 90, 14, 23, 4, 4, 67, 99, 81, 74, 70, 74, 36, 96, 68, 9, 64, 39, 88, 35, 54, 89, 96, 58, 66, 27, 88, 97, 32, 14, 6, 35, 78, 20, 71, 6, 85, 66, 57, 2, 58, 91, 72, 5, 29, 56, 73, 48, 86, 52, 9, 93, 22, 57, 79, 42, 12, 1, 31, 68, 17, 59, 63, 76, 7, 77], [73, 81, 14, 13, 17, 20, 11, 9, 1, 83, 8, 85, 91, 70, 84, 63, 62, 77, 37, 7, 47, 1, 59, 95, 39, 69, 39, 21, 99, 9, 87, 2, 97, 16, 92, 36, 74, 71, 90, 66, 33, 73, 73, 75, 52, 91, 11, 12, 26, 53, 5, 26, 26, 48, 61, 50, 90, 65, 1, 87, 42, 47, 74, 35, 22, 73, 24, 26, 56, 70, 52, 5, 48, 41, 31, 18, 83, 27, 21, 39, 80, 85, 26, 8, 44, 2, 71, 7, 63, 22, 5, 52, 19, 8, 20], [17, 25, 21, 11, 72, 93, 33, 49, 64, 23, 53, 82, 3, 13, 91, 65, 85, 2, 40, 5, 42, 31, 77, 42, 5, 36, 6, 54, 4, 58, 7, 76, 87, 83, 25, 57, 66, 12, 74, 33, 85, 37, 74, 32, 20, 69, 3, 97, 91, 68, 82, 44, 19, 14, 89, 28, 85, 85, 80, 53, 34, 87, 58, 98, 88, 78, 48, 65, 98, 40, 11, 57, 10, 67, 70, 81, 60, 79, 74, 72, 97, 59, 79, 47, 30, 20, 54, 80, 89, 91, 14, 5, 33, 36, 79, 39], [60, 85, 59, 39, 60, 7, 57, 76, 77, 92, 6, 35, 15, 72, 23, 41, 45, 52, 95, 18, 64, 79, 86, 53, 56, 31, 69, 11, 91, 31, 84, 50, 44, 82, 22, 81, 41, 40, 30, 42, 30, 91, 48, 94, 74, 76, 64, 58, 74, 25, 96, 57, 14, 19, 3, 99, 28, 83, 15, 75, 99, 1, 89, 85, 79, 50, 3, 95, 32, 67, 44, 8, 7, 41, 62, 64, 29, 20, 14, 76, 26, 55, 48, 71, 69, 66, 19, 72, 44, 25, 14, 1, 48, 74, 12, 98, 7], [64, 66, 84, 24, 18, 16, 27, 48, 20, 14, 47, 69, 30, 86, 48, 40, 23, 16, 61, 21, 51, 50, 26, 47, 35, 33, 91, 28, 78, 64, 43, 68, 4, 79, 51, 8, 19, 60, 52, 95, 6, 68, 46, 86, 35, 97, 27, 58, 4, 65, 30, 58, 99, 12, 12, 75, 91, 39, 50, 31, 42, 64, 70, 4, 46, 7, 98, 73, 98, 93, 37, 89, 77, 91, 64, 71, 64, 65, 66, 21, 78, 62, 81, 74, 42, 20, 83, 70, 73, 95, 78, 45, 92, 27, 34, 53, 71, 15], [30, 11, 85, 31, 34, 71, 13, 48, 5, 14, 44, 3, 19, 67, 23, 73, 19, 57, 6, 90, 94, 72, 57, 69, 81, 62, 59, 68, 88, 57, 55, 69, 49, 13, 7, 87, 97, 80, 89, 5, 71, 5, 5, 26, 38, 40, 16, 62, 45, 99, 18, 38, 98, 24, 21, 26, 62, 74, 69, 4, 85, 57, 77, 35, 58, 67, 91, 79, 79, 57, 86, 28, 66, 34, 72, 51, 76, 78, 36, 95, 63, 90, 8, 78, 47, 63, 45, 31, 22, 70, 52, 48, 79, 94, 15, 77, 61, 67, 68], [23, 33, 44, 81, 80, 92, 93, 75, 94, 88, 23, 61, 39, 76, 22, 3, 28, 94, 32, 6, 49, 65, 41, 34, 18, 23, 8, 47, 62, 60, 3, 63, 33, 13, 80, 52, 31, 54, 73, 43, 70, 26, 16, 69, 57, 87, 83, 31, 3, 93, 70, 81, 47, 95, 77, 44, 29, 68, 39, 51, 56, 59, 63, 7, 25, 70, 7, 77, 43, 53, 64, 3, 94, 42, 95, 39, 18, 1, 66, 21, 16, 97, 20, 50, 90, 16, 70, 10, 95, 69, 29, 6, 25, 61, 41, 26, 15, 59, 63, 35]]
	inp = x + y
	for h in range(-2, (len(inp) * -1) - 1, -1):
		ind = 0
		for i in inp[h]:
			a = inp[h + 1][ind]
			b = inp[h + 1][ind + 1]
			if a > b:
				inp[h][ind] = i + a
			else:
				inp[h][ind] = i + b
			ind += 1
	print(inp[0][0])
def problem67extractfile():
	triangletxt = open('EulerNet/problem67.txt').read().strip()
	triangle = []
	for row in triangletxt.split('\n'):
		triangle.append([int, row.strip().split(' ')])
	inp = []
	for i in triangle:
		inp.extend(i[1:])
	for h in range(-2, (len(inp) * -1) - 1, -1):
		ind = 0
		for i in inp[h]:
			a = int(inp[h + 1][ind])
			b = int(inp[h + 1][ind + 1])
			if a > b:
				inp[h][ind] = int(i) + a
			else:
				inp[h][ind] = int(i) + b
			ind += 1
	print(inp[0][0])
# problem67() = problem67extractfile() = 7273

def problem68():
	from itertools import permutations
	def string5gon(tenlist): # list of digits from 1 - 10
		a = tenlist[0]
		b = tenlist[1]
		c = tenlist[2]
		d = tenlist[3]
		e = tenlist[4]
		f = tenlist[5]
		g = tenlist[6]
		h = tenlist[7]
		i = tenlist[8]
		j = tenlist[9]
		if tenlist[0] + tenlist[1] + tenlist[2] == tenlist[1] + tenlist[3] + tenlist[4] == tenlist[3] + tenlist[5] + tenlist[6] == tenlist[5] + tenlist[7] + tenlist[8] == tenlist[7] + tenlist[2] + tenlist[9]:
			x = min(tenlist[0], tenlist[4], tenlist[6], tenlist[8], tenlist[9])
			if x == tenlist[0]:
				return int(''.join(map(str, [tenlist[0], tenlist[1], tenlist[2], tenlist[9], tenlist[2], tenlist[7], tenlist[8], tenlist[7], tenlist[5], tenlist[6], tenlist[5], tenlist[3], tenlist[4], tenlist[3], tenlist[1]])))
			elif x == tenlist[4]:
				return int(''.join(map(str, [tenlist[4], tenlist[3], tenlist[1], tenlist[0], tenlist[1], tenlist[2], tenlist[9], tenlist[2], tenlist[7], tenlist[8], tenlist[7], tenlist[5], tenlist[6], tenlist[5], tenlist[3]])))
			elif x == tenlist[6]:
				return int(''.join(map(str, [tenlist[6], tenlist[5], tenlist[3], tenlist[4], tenlist[3], tenlist[1], tenlist[0], tenlist[1], tenlist[2], tenlist[9], tenlist[2], tenlist[7], tenlist[8], tenlist[7], tenlist[5]])))
			elif x == tenlist[8]:
				return int(''.join(map(str, [tenlist[8], tenlist[7], tenlist[5], tenlist[6], tenlist[5], tenlist[3], tenlist[4], tenlist[3], tenlist[1], tenlist[0], tenlist[1], tenlist[2], tenlist[9], tenlist[2], tenlist[7]])))
			elif x == tenlist[9]:
				return int(''.join(map(str, [tenlist[9], tenlist[2], tenlist[7], tenlist[8], tenlist[7], tenlist[5], tenlist[6], tenlist[5], tenlist[3], tenlist[4], tenlist[3], tenlist[1], tenlist[0], tenlist[1], tenlist[2]])))
	answers = []
	for i in list(permutations([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])):
		y = string5gon(list(i))
		if y != None:
			if len(str(y)) == 16:
				answers.append(y)
	print(max(answers))
# problem68() = 6531031914842725

def problem69(maxrange):
	def phi(n):
		r = n
		if n % 2 == 0:
			while n % 2 == 0:
				n //= 2
			r -= r // 2
		i = 3
		while i * i <= n:
			if n % i == 0:
				while n % i == 0:
					n //= i
				r -= r // i
			i += 2
		if n > 1:
			r -= r // n
		return r
	philist = []
	for i in range(1, maxrange + 1):
		philist.append(i / phi(i))
	print(philist.index(max(philist)) + 1)
# problem69(1000000) = 510510

def problem70(maxrange):
	from sympy.ntheory.factor_ import totient
	ratio = 2
	totientnum = 1
	for i in range(21, maxrange):
		j = totient(i)
		if i / j < ratio:
			x = list(str(i))
			x.sort(key = int)
			y = list(str(j))
			y.sort(key = int)
			if x == y:
				totientnum = i
				ratio = i / j
	print(totientnum)
# problem70(10000000) = 8319823

def problem71(comparefrac, maxrange):
	for i in range(maxrange, 1, -1):
		x = (i * comparefrac[0] - 1) / comparefrac[1]
		if x  == int(x):
			print([int(x), i])
			break
# problem71((3, 7), 1000000) = [428570, 999997]

def problem72(maxrange):
	from sympy.ntheory.factor_ import totient
	# alternate function for calculating phi (Euler's Totient Function)
	def phi(n):
		r = n
		if n % 2 == 0:
			while n % 2 == 0:
				n //= 2
			r -= r // 2
		i = 3
		while i * i <= n:
			if n % i == 0:
				while n % i == 0:
					n //= i
				r -= r // i
			i += 2
		if n > 1:
			r -= r // n
		return r
	ans = 0
	for i in range(2, maxrange + 1):
		ans += totient(i)
	print(ans)
# problem72(1000000) = 303963552391

def problem73(lowerfrac, upperfrac, maxrange):
	import math
	# alternate function for calculatine GCD
	def gcd(a, b):  # a < b
	    while a != 0:
	        a, b = b % a, a
	    return b
	ans = 0
	x = lowerfrac[0] / lowerfrac[1]
	y = upperfrac[0] / upperfrac[1]
	for i in range(2, 12000 + 1):
		j = math.ceil((x) * i)
		while True:
			if j / i >= x and j / i <= y:
				if math.gcd(j, i) == 1:
					ans += 1
				j += 1
			else:
				break
	print(ans - 2)
# problem73((1, 3), (1, 2), 8) = 7295372

def problem74(factchainlength):
	def sumfactorial(num):
		from math import factorial
		fact = 0
		for i in str(num):
			fact += factorial(int(i))
		return fact
	def factorialchain(num):
		factlist = [num]
		while True:
			x = sumfactorial(factlist[-1])
			if factlist.count(x) == 0:
				factlist.append(x)
			else:
				return len(factlist)
	ans = 0
	for i in range(1, 1000000):
		if factorialchain(i) == factchainlength:
			ans += 1
	print(ans)
# problem74(60) = 402

def problem75(maxrange):
	perimeters = []
	for i in range(1, int(maxrange**.5)):
		for j in range(1, i):
			times = 1
			while times * (2 * (i**2 + (j*i))) <= maxrange:
				perimeters.append(tuple(sorted([times * (i**2 - j**2), times * (2*i*j), times * (i**2 + j**2)])))
				times += 1
	sums = [sum(i) for i in set(perimeters)]
	repeats = [i for i in sums if sums.count(i) > 1]
	print(len(set(sums)) - len(set(repeats)))
# problem75(1500000)

def problem76(target):
	ways = [0] * (target + 1)
	ways[0] = 1
	for i in range(1, target):
		for j in range(i, target + 1):
			ways[j] += ways[j-i]
	print(ways[-1])
# problem76(100) = 190569291

def problem77(minprimesums):
	def sieve(maxnum):
		# my own Sieve of Eratosthenes
		boolprimes = [True] * (maxnum - 1)
		boolprimes.insert(0, '')
		boolprimes.insert(0, '')
		for i in range(2, int(maxnum ** .5) + 1):
			if boolprimes[i]:
				y = i
				while i * y <= maxnum:
					boolprimes[i * y] = False
					y += 1
		return [i for i, x in enumerate(boolprimes) if x]
	primes = sieve(1000)
	num = 2
	while True:
		ways = [0] * (num + 1)
		ways[0] = 1
		for i in range(0, len(primes)):
			for j in range(primes[i], num + 1):
				ways[j] += ways[j - primes[i]]
		if ways[num] > minprimesums:
			break
		num += 1
	print(num)
# problem77(5000) = 71

def problem78(mindivisible):
	def summationways(target):
		ways = [0] * (target + 1)
		ways[0] = 1
		for i in range(1, target):
			for j in range(i, target + 1):
				ways[j] += ways[j-i]
		return(ways[-1] + 1)
	div = 0
	while summationways(div) % mindivisible != 0:
		div += 1
	print(div)
# problem78(1000000)

def problem79():
	inputlist = [str(i) for i in [319, 680, 180, 690, 129, 620, 762, 689, 762, 318, 368, 710, 720, 710, 629, 168, 160, 689, 716, 731, 736, 729, 316, 729, 729, 710, 769, 290, 719, 680, 318, 389, 162, 289, 162, 718, 729, 319, 790, 680, 890, 362, 319, 760, 316, 729, 380, 319, 728, 716]]
	def breakpasscode(inputlist):
		inplist = inputlist
		reject = ''
		for i in inplist:
			reject += i[1]
		first = ''
		for i in inplist:
			if (i[0] in reject) == False:
				first += i[0]
		firstchar = list(set(first))[0]
		answer = firstchar
		for x in range(len(inplist)):
			for i in inplist:
				j = i.replace(firstchar, '')
				for n, m in enumerate(inplist):
					if m == i:
						inplist[n] = j
			most = []
			for i in inplist:
				try:
					most.append(i[0])
				except:
					continue
			try:
				firstchar = max(set(most), key=most.count)
			except:
				continue
			answer += firstchar
		print(answer)
	breakpasscode(inputlist)
# problem79() = 73162890

def problem80():
	import decimal
	ans = 0
	for i in range(1, 101):
		if i ** .5 != int(i ** .5):
			ans += sum([int(i) for i in str((decimal.Decimal(i)).sqrt(decimal.Context(prec=102))) if i != '.'][0:100])
	print(ans)
# problem80() = 40886

def problem81():
	matrixtxt = open('EulerNet/problem81.txt').read().strip()
	l = []
	for row in matrixtxt.split('\n'):
		l.append([int, row.strip().split(' ')])
	matrix = []
	for i in l:
		j = i[1:]
		k = j[0][0].split(',')
		matrix.append([int(l) for l in k])
	for i in range(-2, (len(matrix[-1]) * -1) - 1, -1):
		matrix[-1][i] += matrix[-1][i + 1]
	for i in range(-2, (len(matrix) * -1) - 1, -1):
		matrix[i][-1] = matrix[i][-1] + matrix[i + 1][-1]
	for i in range(-2, (len(matrix) * -1) - 1, -1):
		for j in range(-2, (len(matrix) * -1) - 1, -1):
			matrix[j][i] += min(matrix[j][i + 1], matrix[j + 1][i])
	print(matrix[0][0])
# problem81() = 427337

def problem85(closestrectnum):
	import math
	def nCr(n,r):
		return math.factorial(n) / (math.factorial(r) * math.factorial(n-r))
	dist = 5
	ans = []
	for i in range(3, 101):
		for j in range(3, 101):
			x = abs(closestrectnum - (nCr(i, 2) * nCr(j, 2)))
			if x < dist:
				dist = x
				ans = [i, j]
	print((ans[0] - 1) * (ans[1] - 1))
# problem85(2000000) = 2772

def problem86(maxsolutions):
	ans = 0
	i = 0
	while ans < maxsolutions:
		i += 1
		for j in range(3, (i * 2) + 1):
			if (i**2 + j**2)**.5 == int((i**2 + j**2)**.5):
				if j <= i:
					ans += int(j / 2)
				else:
					ans += i - int((j + 1) / 2) + 1
	print(i)
# problem86(1000000) = 1818

def problem87(maxrange):
	def sieve(maxnum):
		# my own Sieve of Eratosthenes
		boolprimes = [True] * (maxnum - 1)
		boolprimes.insert(0, '')
		boolprimes.insert(0, '')
		for i in range(2, int(maxnum ** .5) + 1):
			if boolprimes[i]:
				y = i
				while i * y <= maxnum:
					boolprimes[i * y] = False
					y += 1
		return [i for i, x in enumerate(boolprimes) if x]
	x = sieve(int(maxrange**(1/2)))
	y = sieve(int(maxrange**(1/3)))
	z = sieve(int(maxrange**(1/4)))
	sums = []
	for i in x:
		for j in y:
			for k in z:
				add = i**2 + j**3 + k**4
				if add <= maxrange:
					sums.append(add)
	print(len(set(sums)))
# problem87(50000000) = 1097343

def problem89():
	romantxt = open('EulerNet/problem89.txt').read().strip()
	romanlist = romantxt.split('\n')
	def bestroman(romanstring):
		roman = {'I' : 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}
		x = 0
		val = 0
		while x < len(romanstring):
			if x + 1 < len(romanstring) and romanstring[x: x + 2] in roman:
				val += roman[romanstring[x: x + 2]]
				x += 2
			else:
				val += roman[romanstring[x]]
				x += 1
		realroman = ''
		ints = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
		romans = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
		romannum = ''
		ind = 0
		while val > 0:
			for i in range(val // ints[ind]):
				romannum += romans[ind]
				val -= ints[ind]
			ind += 1
		return romannum
	ans = 0
	for i in romanlist:
		x = len(i)
		y = len(bestroman(i))
		ans += x - y
	print(ans)
# problem89() = 743

def problem92():
	def sumsquaredigits(num):
		return sum([int(i) ** 2 for i in list(str(num))])
	print(sumsquaredigits(85))
	ans = 0
	for i in range(1, 100):
		eightynine = []
		while i != 1 and eightynine.count(89) <= 2:
			print(i)
			if sumsquaredigits(i) == 89:
				eightynine.append(89)
			i = sumsquaredigits
		if eightynine.count(89) == 2:
			ans += 1
	print(sumsquaredigits(85))
# problem92()

def problem92(chainend = 89):
	def squaredigits(num):
		n = 0
		for i in str(num):
			n += int(i)**2
		return n
	def squarechainend(num):
		l = [num]
		while True:
			x = squaredigits(l[-1])
			if x == 1 or x == 89:
				return x
			else:
				l.append(x)
	ans = 0
	for i in range(1, 10000000):
		if squarechainend(i) == chainend:
			ans += 1
	print(ans)
# problem92() = 8581146

def problem96():
	sudokutxt = open('problem96.txt').read().strip()
	sudokulist = [i for i in sudokutxt.split('\n') if sudokutxt.split('\n').index(i) % 10 != 0]
	problemlist = []
	for i in range(0, len(sudokulist), 9):
		l = []
		for j in sudokulist[i:i+9]:
			l.append([int(x) for x in list(j)])
		problemlist.append(l)
	anslist = []
	for puzzle in problemlist:
		def checknum(x, y, n):
			for i in range(9):
				if puzzle[x][i] == n or puzzle[i][y] == n:
					return False
			boxx = (x // 3) * 3
			boxy = (y // 3) * 3
			for i in range(3):
				for j in range(3):
					if puzzle[boxx + i][boxy + j] == n:
						return False
			return True
		def solutionnums():
			for i in range(9):
				for j in range(9):
					if puzzle[i][j] == 0:
						for n in range(1, 10):
							if checknum(i, j, n):
								puzzle[i][j] = n
								solutionnums()
								puzzle[i][j] = 0
						return
			anslist.append(int(str(puzzle[0][0]) + str(puzzle[0][1]) + str(puzzle[0][2])))
		solutionnums()
	print(sum(anslist))
# problem96() = 24702
		
def problem97():
	print(str(((2 ** 7830457) * 28433) + 1)[-10:])
# problem97() = 8739992577

def problem99():
	import math
	powertxt = open('EulerNet/problem99.txt').read().strip()
	powerlist = [x.split(',') for x in powertxt.split('\n')]
	for x in range(len(powerlist)):
		powerlist[x] = int(powerlist[x][1]) * math.log(int(powerlist[x][0]))
	print(powerlist.index(max(powerlist)) + 1)
# problem99() = 709

def problem102():
	def shoelace(listofpointtuples):
		listofpointtuples.append(listofpointtuples[0])
		leftsum = 0
		for i in range(0, len(listofpointtuples) - 1):
			leftsum += listofpointtuples[i][0] * listofpointtuples[i + 1][1]
		rightsum = 0
		for i in range(0, len(listofpointtuples) - 1):
			rightsum += listofpointtuples[i][1] * listofpointtuples[i + 1][0]
		return abs((leftsum - rightsum) / 2)
	pointstxt = open('EulerNet/problem102.txt').read().strip()
	l = []
	for row in pointstxt.split('\n'):
		l.append(row.strip().split(','))
	ans = 0
	for i in l:
		x1 = int(i[0])
		y1 = int(i[1])
		x2 = int(i[2])
		y2 = int(i[3])
		x3 = int(i[4])
		y3 = int(i[5])
		totalsum = shoelace([[x1, y1], [x2, y2], [x3, y3]])
		sum1 = shoelace([[0, 0], [x1, y1], [x2, y2]])
		sum2 = shoelace([[0, 0], [x3, y3], [x2, y2]])
		sum3 = shoelace([[0, 0], [x1, y1], [x3, y3]])
		if sum1 + sum2 + sum3 == totalsum:
			ans += 1
	print(ans)
# problem102() = 228

def problem112(bouncypercent):
	def checkbouncy(num):
		if str(num) == ''.join(sorted(str(num))) or str(num) == ''.join(sorted(str(num), reverse = True)):
			return False
		return True
	bouncy = 0
	count = 100
	while True:
		if checkbouncy(count) == True:
			bouncy += 1
		if bouncy / count >= bouncypercent:
			break
		count += 1
	print(count)
# problem112(.99) = 1587000

def problem113(powerof10):
	import math
	def nCr(n,r):
		return math.factorial(n) / (math.factorial(r) * math.factorial(n-r))
	print(int((nCr(powerof10 + 9, powerof10) - 1) + (nCr(powerof10 + 10, powerof10) - (powerof10+1)) - (9 * powerof10)))
# problem113(100) = 51161058134250

def problem119(nthterm):
	def sumdigits(num):
		from math import log
		if log(num, 10) == int(log(num, 10)):
			return
		return sum([int(i) for i in str(num)])
	seq = []
	base = 2
	while len(seq) <= 50:
		for i in range(2, 50):
			val = base ** i
			if base == sumdigits(val):
				seq.append(val)
			if len(seq) > 50:
				break
		base += 1
	print(sorted(seq)[nthterm - 1])
# problem119(30) = 248155780267521

def problem124(nthrad, upperlimit):
	def sieveoferatosthenes(maxnum):
		# my own Sieve of Eratosthenes
		boolprimes = [True] * (maxnum - 1)
		boolprimes.insert(0, '')
		boolprimes.insert(0, '')
		for i in range(2, int(maxnum ** .5) + 1):
			if boolprimes[i]:
				y = i
				while i * y <= maxnum:
					boolprimes[i * y] = False
					y += 1
		return [i for i, x in enumerate(boolprimes) if x]
	primes = sieveoferatosthenes(upperlimit)
	pairs = []
	for i in range(1, upperlimit + 1):
		index = 0
		factors = []
		if i in primes:
			factors.append(i)
		else:
			while primes[index] <= i/2:
				if i % primes[index] == 0:
					factors.append(primes[index])
				index += 1
		product = 1
		for j in factors:
			product *= j
		pairs.append([product, i])
	pairs.sort()
	print(pairs[nthrad - 1][1])
# problem124(10000, 100000) = 21417

def problem131():
	def sieveoferatosthenes(maxnum):
		# my own Sieve of Eratosthenes
		boolprimes = [True] * (maxnum - 1)
		boolprimes.insert(0, '')
		boolprimes.insert(0, '')
		for i in range(2, int(maxnum ** .5) + 1):
			if boolprimes[i]:
				y = i
				while i * y <= maxnum:
					boolprimes[i * y] = False
					y += 1
		return [i for i, x in enumerate(boolprimes) if x]
	primes = sieveoferatosthenes(1000000)
	poss = [(i+1)**3 - i**3 for i in range(1, 588)]
	ans = 0
	for i in poss:
		if i in primes:
			ans += 1
	print(ans)
# problem131() = 173

def problem135():
	ans = 0
	n = 1
	while n <= 100000:
		possibilities = 0
		for i in range(1, n):
			if n % i == 0:
				j = n / i
				if 4 * j > i and (i + j) % 4 == 0:
					possibilities += 1
					if possibilities > 10:
						break
		if possibilities == 10:
			ans += 1
		n += 1
	print(ans)
problem135()

def problem145(upperlimit):
	ans = 0
	for i in range(1, len(str(1000000000))):
		if i % 2 == 0:
			ans += 20 * (30 ** ((i / 2) - 1))
		elif i % 2 == 1:
			if (i + 1) / 4 == int((i + 1) / 4):
				x = (i + 1) / 4
				ans += (20 ** x) * (25 ** (x - 1)) * 5
	print(int(ans))
# problem145(1000000000) = 608720

def problem146(num):
	def primelist(number):
		def check_prime(num):
			prime = True
			for i in range(2, int(num ** .5) + 1):
				if num % i == 0:
					prime = False
			return prime
		answerslist = [2, 3]
		six = 1
		while answerslist[-2] < number:
			if 6 * six + 1 < number:
				if check_prime((6 * six) - 1) == True:
					answerslist.append((6 * six) - 1)
				if check_prime((6 * six) + 1) == True:
					answerslist.append((6 * six) + 1)
				six += 1
			else:
				break
		return answerslist
	primes = primelist(num ** 2)
	ans = 0
	for i in primes:
		if (i - 1) ** .5 <= num:
			if (i - 1) ** .5 == int((i - 1) ** .5) and primes.count(i + 2) == 1 and primes.count(i + 6) == 1 and primes.count(i + 8) == 1 and primes.count(i + 12) == 1:
				ans += (i - 1) ** .5
	print(ans)
# problem146(1000000)

def problem187(upperlimit):
	def sieveoferatosthenes(maxnum):
		# my own Sieve of Eratosthenes
		boolprimes = [True] * (maxnum - 1)
		boolprimes.insert(0, '')
		boolprimes.insert(0, '')
		for i in range(2, int(maxnum ** .5) + 1):
			if boolprimes[i]:
				y = i
				while i * y <= maxnum:
					boolprimes[i * y] = False
					y += 1
		return [i for i, x in enumerate(boolprimes) if x]
	primes = sieveoferatosthenes(int(upperlimit / 2))
	ans = 0
	for i in range(0, len(primes)):
		for j in range(i, len(primes)):
			if primes[i] * primes[j] > upperlimit:
				break
			ans += 1
	print(ans)
# problem187(100000000) = 17427258

def problem205():
	d4 = {}
	for i in range(9, 36 + 1):
		d4[i] = 0
	d6 = {}
	for i in range(6, 36 + 1):
		d6[i] = 0
	for a in range(1, 5):
		for b in range(1, 5):
			for c in range(1, 5):
				for d in range(1, 5):
					for e in range(1, 5):
						for f in range(1, 5):
							for g in range(1, 5):
								for h in range(1, 5):
									for i in range(1, 5):
										d4[a + b + c + d + e + f + g + h + i] += 1
	for j in range(1, 7):
		for k in range(1, 7):
			for l in range(1, 7):
				for m in range(1, 7):
					for n in range(1, 7):
						for o in range(1, 7):
							d6[j + k + l + m + n + o] += 1
	n = 0
	for i in d4.keys():
		d6vals = 0
		for j in range(6, i):
			d6vals += d6[j]
		n += d4[i] * d6vals
	print(round(n / (4**9 * 6**6), 7))
# problem205() = 0.5731441

def problem206():
	x = 100000000
	while x < 1000000000:
		i = str(x ** 2)
		if i[0] == '1' and i[2] == '2' and i[4] == '3' and i[6] == '4' and i[8] == '5' and i[10] == '6' and i[12] == '7' and i[14] == '8' and i[16] == '9':
			print(int(str(x) + '0'))
			break
		x += 1
# problem206() = 1389019170

def problem686(nth):
	repeatlist = [289, 196, 289, 196, 485, 196, 289, 196, 289, 196, 289, 196, 485, 196, 289, 196, 289, 196, 289, 196, 485, 196, 289, 196, 289, 196, 289, 196, 485, 485, 196, 289, 196, 289, 196, 485, 485, 196, 289, 196, 289, 196, 485, 485, 196, 289, 196, 289, 196, 485, 485, 196, 289, 196]
	sumrep = sum(repeatlist)
	place = (nth - 2) % 54
	quot = int((nth - 2) / 54)
	print((sumrep * quot) + sum(repeatlist[0: place + 1]) + 90)
# problem686(45)
# problem686(678910)
'''
two = 2
check = 0
power = 1
while True:
	if str(two)[0:3] == '123':
		check += 1
	if check == 678910:
		print(power)
		break
	two *= 2
	power += 1
'''
'''
def sieve(n):
	# efficient method to find all primes up to a number using Sieve of Eratosthenes
    boolPrimes = [True for i in range(n+1)]
    Primes = [2]
    p = 2
    while(1 == 1):
        for i in range(p*p, n+1, p):
            boolPrimes[i] = False
        for i in range(p+1, n+1):
            if (i == n):
                return Primes
            if (boolPrimes[i] == True):
                p = i
                Primes.append(p)
                break

def checkfigurate(num):
	octa = int((int(((3 * num) + 1)**.5) + 1) / 3)
	if int(octa * ((3 * octa) - 2)) == num:
		return 8
	hept = int((int(((40 * num) + 9)**.5) + 3) / 10)
	if int((hept * ((5 * hept) - 3)) / 2) == num:
		return 7
	hexa = int((int(((8 * num) + 1)**.5) + 1) / 4)
	if int(hexa * ((2 * hexa) - 1)) == num:
		return 6
	pent = int((int(((24 * num) + 1)**.5) + 1) / 6)
	if int((pent * ((3 * pent) - 1)) / 2) == num:
		return 5
	if int(num**.5 == int(num**.5)):
		return 4
	tri = int((int(((8 * num) + 1)**.5) - 1) / 2)
	if int((tri * (tri + 1)) / 2) == num:
		return 3
	return False
tri = []
square = []
for i in range(1000, 10000):
	if str(i)[2] != '0':
		if checkfigurate(i) == 3:
			tri.append(i)
		elif checkfigurate(i) == 4:
			square.append(i)
		elif checkfigurate(i) == 5:
			pent.append(i)
		elif checkfigurate(i) == 6:
			hexa.append(i)
		elif checkfigurate(i) == 7:
			hept.append(i)
		elif checkfigurate(i) == 8:
			octa.append(i)
checkfigurate(1)

for i in perms:
	three = variables[i[0]]
	four = variables[i[1]]
	five = variables[i[2]]
	six = variables[i[3]]
	seven = variables[i[4]]
	eight = variables[i[5]]
	for j in lasttwodigits(three):
		try:
			if j in firsttwodigits(four):
				j_ind = lasttwodigits(four).index(j)
				k = lasttwodigits(four)[j_ind]
				if k in firsttwodigits(five):
					k_ind = lasttwodigits(five).index(k)
					l = lasttwodigits(five)[k_ind]
					if l in firsttwodigits(six):
						l_ind = lasttwodigits(six).index(l)
						m = lasttwodigits(six)[l_ind]
						if m in firsttwodigits(seven):
							m_ind = lasttwodigits(seven).index(m)
							n = lasttwodigits(seven)[m_ind]
							if n in firsttwodigits(eight):
								n_ind = lasttwodigits(eight).index(n)
								o = lasttwodigits(eight)[n_ind]
								if o in firsttwodigits(three):
									print([j, k, l, m, n, o])
'''
